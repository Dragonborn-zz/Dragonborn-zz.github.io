{
    "version": "https://jsonfeed.org/version/1",
    "title": "Dragonborn-zz's个人博客 • All posts by \"工具\" category",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2024/02/06/%E5%B7%A5%E5%85%B7/vim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/",
            "url": "http://example.com/2024/02/06/%E5%B7%A5%E5%85%B7/vim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/",
            "title": "vim常用命令",
            "date_published": "2024-02-06T09:40:01.000Z",
            "content_html": "<h2 id=\"vim-键盘图\"><a class=\"markdownIt-Anchor\" href=\"#vim-键盘图\">#</a> vim 键盘图</h2>\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2015/10/vi-vim-cheat-sheet-sch.gif\" alt=\"\"></p>\n<h2 id=\"vivim-的使用\"><a class=\"markdownIt-Anchor\" href=\"#vivim-的使用\">#</a> vi/vim 的使用</h2>\n<p>基本上 vi/vim 共分为三种模式，<strong>命令模式（Command Mode）、输入模式（Insert Mode）和命令行模式（Command-Line Mode）</strong>。</p>\n<h3 id=\"命令模式\"><a class=\"markdownIt-Anchor\" href=\"#命令模式\">#</a> 命令模式</h3>\n<p><strong>用户刚刚启动 vi/vim，便进入了命令模式。</strong></p>\n<p>此状态下敲击键盘动作会被 Vim 识别为命令，而非输入字符，比如我们此时按下 i，并不会输入一个字符，i 被当作了一个命令。</p>\n<p>以下是普通模式常用的几个命令：</p>\n<ul>\n<li>i – 切换到输入模式，在光标当前位置开始输入文本。</li>\n<li>x – 删除当前光标所在处的字符。</li>\n<li>: – 切换到底线命令模式，以在最底一行输入命令。</li>\n<li>a – 进入插入模式，在光标下一个位置开始输入文本。</li>\n<li>o：在当前行的下方插入一个新行，并进入插入模式。</li>\n<li>O – 在当前行的上方插入一个新行，并进入插入模式。</li>\n<li>dd – 删除当前行。</li>\n<li>yy – 复制当前行。</li>\n<li>p – 粘贴剪贴板内容到光标下方。</li>\n<li>P – 粘贴剪贴板内容到光标上方。</li>\n<li>u – 撤销上一次操作。</li>\n<li>Ctrl + r – 重做上一次撤销的操作。</li>\n<li>:w – 保存文件。</li>\n<li>:q – 退出 Vim 编辑器。</li>\n<li>:q! – 强制退出 Vim 编辑器，不保存修改。</li>\n</ul>\n<p>若想要编辑文本，只需要启动 Vim，进入了命令模式，按下 i 切换到输入模式即可。</p>\n<p>命令模式只有一些最基本的命令，因此仍要依靠<strong>底线命令行模式</strong>输入更多命令。</p>\n<h3 id=\"输入模式\"><a class=\"markdownIt-Anchor\" href=\"#输入模式\">#</a> 输入模式</h3>\n<p>在命令模式下按下 i 就进入了输入模式，使用 Esc 键可以返回到普通模式。</p>\n<p>在输入模式中，可以使用以下按键：</p>\n<ul>\n<li><strong>字符按键以及 Shift 组合</strong>，输入字符</li>\n<li><strong>ENTER</strong>，回车键，换行</li>\n<li><strong>BACK SPACE</strong>，退格键，删除光标前一个字符</li>\n<li><strong>DEL</strong>，删除键，删除光标后一个字符</li>\n<li><strong>方向键</strong>，在文本中移动光标</li>\n<li><strong>HOME</strong>/<strong>END</strong>，移动光标到行首 / 行尾</li>\n<li><strong>Page Up</strong>/<strong>Page Down</strong>，上 / 下翻页</li>\n<li><strong>Insert</strong>，切换光标为输入 / 替换模式，光标将变成竖线 / 下划线</li>\n<li><strong>ESC</strong>，退出输入模式，切换到命令模式</li>\n</ul>\n<h3 id=\"底线命令模式\"><a class=\"markdownIt-Anchor\" href=\"#底线命令模式\">#</a> 底线命令模式</h3>\n<p>在命令模式下按下 :（英文冒号）就进入了底线命令模式。</p>\n<p>底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。</p>\n<p>在底线命令模式中，基本的命令有（已经省略了冒号）：</p>\n<ul>\n<li><code>:w</code> ：保存文件。</li>\n<li><code>:q</code> ：退出 Vim 编辑器。</li>\n<li><code>:wq</code> ：保存文件并退出 Vim 编辑器。</li>\n<li><code>:q!</code> ：强制退出 Vim 编辑器，不保存修改。</li>\n</ul>\n<p>按 ESC 键可随时退出底线命令模式。</p>\n<p>简单的说，我们可以将这三个模式想成底下的图标来表示：</p>\n<p><img src=\"../_resources/vim-vi-workmodel_52de27b995914cba974754e535802695.png\" alt=\"\"></p>\n<hr>\n<h3 id=\"第一部分一般模式可用的光标移动-复制粘贴-搜索替换等\"><a class=\"markdownIt-Anchor\" href=\"#第一部分一般模式可用的光标移动-复制粘贴-搜索替换等\">#</a> 第一部分：一般模式可用的光标移动、复制粘贴、搜索替换等</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">移动光标的方法</th>\n<th style=\"text-align:left\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">h 或 向左箭头键 (←)</td>\n<td style=\"text-align:left\">光标向左移动一个字符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">j 或 向下箭头键 (↓)</td>\n<td style=\"text-align:left\">光标向下移动一个字符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">k 或 向上箭头键 (↑)</td>\n<td style=\"text-align:left\">光标向上移动一个字符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">l 或 向右箭头键 (→)</td>\n<td style=\"text-align:left\">光标向右移动一个字符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">[Ctrl] + [f]</td>\n<td style=\"text-align:left\">屏幕『向下』移动一页，相当于 [Page Down] 按键 (常用)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">[Ctrl] + [b]</td>\n<td style=\"text-align:left\">屏幕『向上』移动一页，相当于 [Page Up] 按键 (常用)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">[Ctrl] + [d]</td>\n<td style=\"text-align:left\">屏幕『向下』移动半页</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">[Ctrl] + [u]</td>\n<td style=\"text-align:left\">屏幕『向上』移动半页</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">+</td>\n<td style=\"text-align:left\">光标移动到非空格符的下一行</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-</td>\n<td style=\"text-align:left\">光标移动到非空格符的上一行</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">n&lt;space&gt;</td>\n<td style=\"text-align:left\">那个 n 表示『数字』，例如 20 。按下数字后再按空格键，光标会向右移动这一行的 n 个字符。例如 20&lt;space&gt; 则光标会向后面移动 20 个字符距离。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">0 或功能键 [Home]</td>\n<td style=\"text-align:left\">这是数字『 0 』：移动到这一行的最前面字符处 (常用)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">$ 或功能键 [End]</td>\n<td style=\"text-align:left\">移动到这一行的最后面字符处 (常用)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">H</td>\n<td style=\"text-align:left\">光标移动到这个屏幕的最上方那一行的第一个字符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">M</td>\n<td style=\"text-align:left\">光标移动到这个屏幕的中央那一行的第一个字符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">L</td>\n<td style=\"text-align:left\">光标移动到这个屏幕的最下方那一行的第一个字符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">G</td>\n<td style=\"text-align:left\">移动到这个档案的最后一行 (常用)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">nG</td>\n<td style=\"text-align:left\">n 为数字。移动到这个档案的第 n 行。例如 20G 则会移动到这个档案的第 20 行 (可配合 :set nu)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">gg</td>\n<td style=\"text-align:left\">移动到这个档案的第一行，相当于 1G 啊！ (常用)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">n&lt;Enter&gt;</td>\n<td style=\"text-align:left\">n 为数字。光标向下移动 n 行 (常用)</td>\n</tr>\n</tbody>\n</table>\n<p>** 搜索替换 **<br>\n| /word | 向光标之下寻找一个名称为 word 的字符串。例如要在档案内搜寻 vbird 这个字符串，就输入 /vbird 即可！ (常用) |<br>\n| ?word | 向光标之上寻找一个字符串名称为 word 的字符串。 |<br>\n| n | 这个 n 是英文按键。代表重复前一个搜寻的动作。举例来说， 如果刚刚我们执行 /vbird 去向下搜寻 vbird 这个字符串，则按下 n 后，会向下继续搜寻下一个名称为 vbird 的字符串。如果是执行？vbird 的话，那么按下 n 则会向上继续搜寻名称为 vbird 的字符串！ |<br>\n| N | 这个 N 是英文按键。与 n 刚好相反，为『反向』进行前一个搜寻动作。 例如 /vbird 后，按下 N 则表示『向上』搜寻 vbird 。 |<br>\n| 使用 /word 配合 n 及 N 是非常有帮助的！可以让你重复的找到一些你搜寻的关键词！ | |<br>\n| :n1,n2s/word1/word2/g | n1 与 n2 为数字。在第 n1 与 n2 行之间寻找 word1 这个字符串，并将该字符串取代为 word2 ！举例来说，在 100 到 200 行之间搜寻 vbird 并取代为 VBIRD 则：<br>\n『:100,200s/vbird/VBIRD/g』。(常用) |<br>\n| :1,<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mi mathvariant=\"normal\">/</mi><mi>w</mi><mi>o</mi><mi>r</mi><mi>d</mi><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>w</mi><mi>o</mi><mi>r</mi><mi>d</mi><mn>2</mn><mi mathvariant=\"normal\">/</mi><mi>g</mi><mtext>或</mtext><mo>:</mo></mrow><annotation encoding=\"application/x-tex\">s/word1/word2/g 或 :%s/word1/word2/g | 从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！(常用) | | :1,</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">or</span><span class=\"mord mathnormal\">d</span><span class=\"mord\">1/</span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">or</span><span class=\"mord mathnormal\">d</span><span class=\"mord\">2/</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord cjk_fallback\">或</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span></span></span></span>s/word1/word2/gc 或 :% s/word1/word2/gc | 从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！且在取代前显示提示字符给用户确认 (confirm) 是否需要取代！(常用) |<br>\n| 删除、复制与贴上 | |<br>\n| x, X | 在一行字当中，x 为向后删除一个字符 (相当于 [del] 按键)， X 为向前删除一个字符 (相当于 [backspace] 亦即是退格键) (常用) |<br>\n| nx | n 为数字，连续向后删除 n 个字符。举例来说，我要连续删除 10 个字符， 『10x』。 |<br>\n| dd | 剪切游标所在的那一整行 (常用)，用 p/P 可以粘贴。 |<br>\n| ndd | n 为数字。剪切光标所在的向下 n 行，例如 20dd 则是剪切 20 行 (常用)，用 p/P 可以粘贴。 |<br>\n| d1G | 删除光标所在到第一行的所有数据 |<br>\n| dG | 删除光标所在到最后一行的所有数据 |<br>\n| d$ | 删除游标所在处，到该行的最后一个字符 |<br>\n| d0 | 那个是数字的 0 ，删除游标所在处，到该行的最前面一个字符 |<br>\n| yy | 复制游标所在的那一行 (常用) |<br>\n| nyy | n 为数字。复制光标所在的向下 n 行，例如 20yy 则是复制 20 行 (常用) |<br>\n| y1G | 复制游标所在行到第一行的所有数据 |<br>\n| yG | 复制游标所在行到最后一行的所有数据 |<br>\n| y0 | 复制光标所在的那个字符到该行行首的所有数据 |<br>\n| y$ | 复制光标所在的那个字符到该行行尾的所有数据 |<br>\n| p, P | p 为将已复制的数据在光标下一行贴上，P 则为贴在游标上一行！ 举例来说，我目前光标在第 20 行，且已经复制了 10 行数据。则按下 p 后， 那 10 行数据会贴在原本的 20 行之后，亦即由 21 行开始贴。但如果是按下 P 呢？ 那么原本的第 20 行会被推到变成 30 行。 (常用) |<br>\n| J | 将光标所在行与下一行的数据结合成同一行 |<br>\n| c | 重复删除多个数据，例如向下删除 10 行，[10cj] |<br>\n| u | 复原前一个动作。(常用) |<br>\n| [Ctrl]+r | 重做上一个动作。(常用) |<br>\n| . | 不要怀疑！这就是小数点！意思是重复前一个动作的意思。 如果你想要重复删除、重复贴上等等动作，按下小数点『.』就好了！ (常用) |<br>\n| 如果你将右手放在键盘上的话，你会发现 hjkl 是排列在一起的，因此可以使用这四个按钮来移动光标。 如果想要进行多次移动的话，例如向下移动 30 行，可以使用 “30j” 或 “30↓” 的组合按键， 亦即加上想要进行的次数 (数字) 后，按下动作即可！ | |</p>\n<h3 id=\"第二部分一般模式切换到编辑模式的可用的按钮说明\"><a class=\"markdownIt-Anchor\" href=\"#第二部分一般模式切换到编辑模式的可用的按钮说明\">#</a> 第二部分：一般模式切换到编辑模式的可用的按钮说明</h3>\n<table>\n<thead>\n<tr>\n<th>进入输入或取代的编辑模式</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>i, I</td>\n<td>进入输入模式 (Insert mode)：</td>\n</tr>\n<tr>\n<td>i 为『从目前光标所在处输入』， I 为『在目前所在行的第一个非空格符处开始输入』。 (常用)</td>\n</tr>\n<tr>\n<td>a, A</td>\n<td>进入输入模式 (Insert mode)：</td>\n</tr>\n<tr>\n<td>a 为『从目前光标所在的下一个字符处开始输入』， A 为『从光标所在行的最后一个字符处开始输入』。(常用)</td>\n</tr>\n<tr>\n<td>o, O</td>\n<td>进入输入模式 (Insert mode)：</td>\n</tr>\n<tr>\n<td>这是英文字母 o 的大小写。o 为在目前光标所在的下一行处输入新的一行； O 为在目前光标所在的上一行处输入新的一行！(常用)</td>\n</tr>\n<tr>\n<td>r, R</td>\n<td>进入取代模式 (Replace mode)：</td>\n</tr>\n<tr>\n<td>r 只会取代光标所在的那一个字符一次；R 会一直取代光标所在的文字，直到按下 ESC 为止；(常用)</td>\n</tr>\n<tr>\n<td>上面这些按键中，在 vi 画面的左下角处会出现『–INSERT–』或『–REPLACE–』的字样。 由名称就知道该动作了吧！！特别注意的是，我们上面也提过了，你想要在档案里面输入字符时， 一定要在左下角处看到 INSERT 或 REPLACE 才能输入喔！</td>\n<td></td>\n</tr>\n<tr>\n<td>[Esc]</td>\n<td>退出编辑模式，回到一般模式中 (常用)</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"第三部分一般模式切换到指令行模式的可用的按钮说明\"><a class=\"markdownIt-Anchor\" href=\"#第三部分一般模式切换到指令行模式的可用的按钮说明\">#</a> 第三部分：一般模式切换到指令行模式的可用的按钮说明</h3>\n<table>\n<thead>\n<tr>\n<th>指令行的储存、离开等指令</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>:w</td>\n<td>将编辑的数据写入硬盘档案中 (常用)</td>\n</tr>\n<tr>\n<td>:w!</td>\n<td>若文件属性为『只读』时，强制写入该档案。不过，到底能不能写入， 还是跟你对该档案的档案权限有关啊！</td>\n</tr>\n<tr>\n<td>:q</td>\n<td>离开 vi (常用)</td>\n</tr>\n<tr>\n<td>:q!</td>\n<td>若曾修改过档案，又不想储存，使用！为强制离开不储存档案。</td>\n</tr>\n<tr>\n<td>注意一下啊，那个惊叹号 (!) 在 vi 当中，常常具有『强制』的意思～</td>\n<td></td>\n</tr>\n<tr>\n<td>:wq</td>\n<td>储存后离开，若为 :wq! 则为强制储存后离开 (常用)</td>\n</tr>\n<tr>\n<td>ZZ</td>\n<td>这是大写的 Z 喔！如果修改过，保存当前文件，然后退出！效果等同于 (保存并退出)</td>\n</tr>\n<tr>\n<td>ZQ</td>\n<td>不保存，强制退出。效果等同于 :q!。</td>\n</tr>\n<tr>\n<td>:w [filename]</td>\n<td>将编辑的数据储存成另一个档案（类似另存新档）</td>\n</tr>\n<tr>\n<td>:r [filename]</td>\n<td>在编辑的数据中，读入另一个档案的数据。亦即将 『filename』 这个档案内容加到游标所在行后面</td>\n</tr>\n<tr>\n<td>:n1,n2 w [filename]</td>\n<td>将 n1 到 n2 的内容储存成 filename 这个档案。</td>\n</tr>\n<tr>\n<td>:! command</td>\n<td>暂时离开 vi 到指令行模式下执行 command 的显示结果！例如</td>\n</tr>\n<tr>\n<td>『:! ls /home』即可在 vi 当中察看 /home 底下以 ls 输出的档案信息！</td>\n</tr>\n<tr>\n<td>vim 环境的变更</td>\n<td></td>\n</tr>\n<tr>\n<td>:set nu</td>\n<td>显示行号，设定之后，会在每一行的前缀显示该行的行号</td>\n</tr>\n<tr>\n<td>:set nonu</td>\n<td>与 set nu 相反，为取消行号！</td>\n</tr>\n</tbody>\n</table>\n<p>特别注意，在 vi/vim 中，数字是很有意义的！数字通常代表重复做几次的意思！ 也有可能是代表去到第几个什么什么的意思。</p>\n<p>举例来说，要删除 50 行，则是用 『50dd』 对吧！ 数字加在动作之前，如我要向下移动 20 行呢？那就是『20j』或者是『20↓』即可。</p>\n",
            "tags": [
                "vim"
            ]
        },
        {
            "id": "http://example.com/2024/02/06/%E5%B7%A5%E5%85%B7/git%E6%9A%82%E5%AD%98%E5%91%BD%E4%BB%A4/",
            "url": "http://example.com/2024/02/06/%E5%B7%A5%E5%85%B7/git%E6%9A%82%E5%AD%98%E5%91%BD%E4%BB%A4/",
            "title": "git暂存命令",
            "date_published": "2024-02-06T08:40:01.000Z",
            "content_html": "<h4 id=\"暂存命令的作用\"><a class=\"markdownIt-Anchor\" href=\"#暂存命令的作用\">#</a> 暂存命令的作用</h4>\n<p>可以将 git 工作区的代码更改暂存，之后就可以执行 git pull、git merge 之类的命令</p>\n<h4 id=\"暂存命令\"><a class=\"markdownIt-Anchor\" href=\"#暂存命令\">#</a> 暂存命令</h4>\n<figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs maxima\">git stash <span class=\"hljs-built_in\">save</span> <span class=\"hljs-string\">&quot;暂存的备注&quot;</span><br></code></pre></td></tr></table></figure>\n<p>直接执行 git stash 也可以达到暂存的目的，但是连续多次暂存后容易让人混淆哪次暂存了哪些代码</p>\n<h4 id=\"查看暂存记录\"><a class=\"markdownIt-Anchor\" href=\"#查看暂存记录\">#</a> 查看暂存记录</h4>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ebnf\"><span class=\"hljs-attribute\">git stash list</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"取回暂存代码\"><a class=\"markdownIt-Anchor\" href=\"#取回暂存代码\">#</a> 取回暂存代码</h4>\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\">git stash <span class=\"hljs-built_in\">pop</span><br></code></pre></td></tr></table></figure>\n<p><strong>取消【取消暂存代码】</strong></p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">git <span class=\"hljs-keyword\">reset</span> <span class=\"hljs-comment\">--hard</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"撤回提交\"><a class=\"markdownIt-Anchor\" href=\"#撤回提交\">#</a> 撤回提交</h2>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">git <span class=\"hljs-keyword\">reset</span> <span class=\"hljs-comment\">--soft HEAD</span><br></code></pre></td></tr></table></figure>",
            "tags": [
                "git"
            ]
        },
        {
            "id": "http://example.com/2023/02/06/%E5%B7%A5%E5%85%B7/git%E6%9B%B4%E6%96%B0.gitignore%E6%96%87%E4%BB%B6%E5%90%8E%E4%B8%8D%E7%94%9F%E6%95%88/",
            "url": "http://example.com/2023/02/06/%E5%B7%A5%E5%85%B7/git%E6%9B%B4%E6%96%B0.gitignore%E6%96%87%E4%BB%B6%E5%90%8E%E4%B8%8D%E7%94%9F%E6%95%88/",
            "title": "git更新.gitignore文件后不生效",
            "date_published": "2023-02-06T00:13:01.000Z",
            "content_html": "<p>项目更新了.gitignore 文件后直接提交不会生效，解决如下</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">git rm -r --cached . <span class=\"hljs-regexp\">//</span> 删除本地缓存<br>git add . <span class=\"hljs-regexp\">//</span> 添加要提交的文件<br>git commit -m <span class=\"hljs-string\">&#x27;update .gitignore&#x27;</span> <span class=\"hljs-regexp\">//</span> 更新本地的缓存<br></code></pre></td></tr></table></figure>",
            "tags": [
                "git"
            ]
        }
    ]
}