{
    "version": "https://jsonfeed.org/version/1",
    "title": "Dragonborn-zz's个人博客 • All posts by \"java\" category",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2024/02/18/android/Gson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%97%B6%E9%97%B4long%E5%80%BC%E8%BD%AC%E4%B8%BADate%E7%B1%BB%E5%9E%8B%E6%8A%A5%E9%94%99/",
            "url": "http://example.com/2024/02/18/android/Gson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%97%B6%E9%97%B4long%E5%80%BC%E8%BD%AC%E4%B8%BADate%E7%B1%BB%E5%9E%8B%E6%8A%A5%E9%94%99/",
            "title": "Gson反序列化时间long值转为Date类型报错",
            "date_published": "2024-02-18T03:28:48.555Z",
            "content_html": "<h2 id=\"gson反序列化时间long值转为date类型报错即gson无法解析位数太长的时间格式\"><a class=\"markdownIt-Anchor\" href=\"#gson反序列化时间long值转为date类型报错即gson无法解析位数太长的时间格式\">#</a> Gson 反序列化时间 long 值转为 Date 类型报错，即 Gson 无法解析位数太长的时间格式</h2>\n<h2 id=\"报错日志\"><a class=\"markdownIt-Anchor\" href=\"#报错日志\">#</a> 报错日志</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs log\">com.google.gson.JsonSyntaxException: 2022-10-21 00:00:00<br>at com.google.gson.internal.bind.DateTypeAdapter.deserializeToDate(DateTypeAdapter.java:87)<br>at com.google.gson.internal.bind.DateTypeAdapter.read(DateTypeAdapter.java:75)<br>at com.google.gson.internal.bind.DateTypeAdapter.read(DateTypeAdapter.java:46)<br>at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.read(ReflectiveTypeAdapterFactory.java:131)<br>at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:222)<br>at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.read(ReflectiveTypeAdapterFactory.java:131)<br>at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:222)<br>at retrofit2.converter.gson.GsonResponseBodyConverter.convert(GsonResponseBodyConverter.java:40)<br>at retrofit2.converter.gson.GsonResponseBodyConverter.convert(GsonResponseBodyConverter.java:27)<br>at retrofit2.OkHttpCall.parseResponse(OkHttpCall.java:243)<br>at retrofit2.OkHttpCall$1.onResponse(OkHttpCall.java:153)<br>at okhttp3.RealCall$AsyncCall.execute(RealCall.java:174)<br>at okhttp3.internal.NamedRunnable.run(NamedRunnable.java:32)<br>at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167)<br>at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641)<br>at java.lang.Thread.run(Thread.java:920)<br>Caused by: java.text.ParseException: Failed to parse date [&quot;2022-10-21 00:00:00&quot;]: Invalid time zone indicator &#x27; &#x27;<br>at com.google.gson.internal.bind.util.ISO8601Utils.parse(ISO8601Utils.java:274)<br>at com.google.gson.internal.bind.DateTypeAdapter.deserializeToDate(DateTypeAdapter.java:85)<br>at com.google.gson.internal.bind.DateTypeAdapter.read(DateTypeAdapter.java:75) <br>at com.google.gson.internal.bind.DateTypeAdapter.read(DateTypeAdapter.java:46) <br>at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.read(ReflectiveTypeAdapterFactory.java:131) <br>at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:222) <br>at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.read(ReflectiveTypeAdapterFactory.java:131) <br>at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:222) <br>at retrofit2.converter.gson.GsonResponseBodyConverter.convert(GsonResponseBodyConverter.java:40) <br>at retrofit2.converter.gson.GsonResponseBodyConverter.convert(GsonResponseBodyConverter.java:27) <br>at retrofit2.OkHttpCall.parseResponse(OkHttpCall.java:243) <br>at retrofit2.OkHttpCall$1.onResponse(OkHttpCall.java:153) <br>at okhttp3.RealCall$AsyncCall.execute(RealCall.java:174) <br>at okhttp3.internal.NamedRunnable.run(NamedRunnable.java:32) <br>at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167) <br>at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641) <br>at java.lang.Thread.run(Thread.java:920) <br>Caused by: java.lang.IndexOutOfBoundsException: Invalid time zone indicator &#x27; &#x27;<br>at com.google.gson.internal.bind.util.ISO8601Utils.parse(ISO8601Utils.java:245) <br></code></pre></td></tr></table></figure>\n<p>引发原因，返回格式解析出了问题</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\"><span class=\"hljs-keyword\">new</span> Retrofit .<span class=\"hljs-constructor\">Builder()</span>.base<span class=\"hljs-constructor\">Url(Api.BASE_URL)</span>.add<span class=\"hljs-constructor\">ConverterFactory(GsonConverterFactory.<span class=\"hljs-params\">create</span>()</span>).build<span class=\"hljs-literal\">()</span>;<br></code></pre></td></tr></table></figure>\n<p>解决办法<br>\n把 <code>GsonConverterFactory.create()</code>  改成 <code>GsonConverterFactory.create(new GsonBuilder().setDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;).create())</code></p>\n",
            "tags": [
                "gson",
                "bug"
            ]
        },
        {
            "id": "http://example.com/2024/02/18/java/lombok%E7%9A%84%E4%BD%BF%E7%94%A8/",
            "url": "http://example.com/2024/02/18/java/lombok%E7%9A%84%E4%BD%BF%E7%94%A8/",
            "title": "lombok的使用",
            "date_published": "2024-02-18T03:28:48.555Z",
            "content_html": "<h2 id=\"1-引入\"><a class=\"markdownIt-Anchor\" href=\"#1-引入\">#</a> 1. 引入</h2>\n<p>java 项目引入</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.projectlombok<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>lombok<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.18.24<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span> <span class=\"hljs-comment\">&lt;!-- Spring Boot 项目此部分可以不写 --&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>Android 项目引入</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\"><span class=\"hljs-keyword\">implementation</span> <span class=\"hljs-string\">&quot;org.projectlombok:lombok:1.18.24&quot;</span><br>annotationProcessor <span class=\"hljs-string\">&quot;org.projectlombok:lombok:1.18.24&quot;</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"2-配置文件\"><a class=\"markdownIt-Anchor\" href=\"#2-配置文件\">#</a> 2. 配置文件</h2>\n<p>lombok 的配置文件名为 lombok.config, 生效的作用域为其所在的目录和其子目录</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs lombok.config\">#指明lombok的根目录为当前配置文件所在目录<br>config.stopBubbling=true<br># 解决子类对象属性值一致，但其继承的父类对象属性值不一致，在比较的时候会出现比较结果不对的情况<br>lombok.equalsAndHashCode.callSuper=call<br># 使子类的toString方法包括其继承的父类对象属性值<br>lombok.toString.callSuper = call<br>#生成的set方法返回由null改为this,可以链式调用<br>#lombok.accessors.chain=true<br></code></pre></td></tr></table></figure>\n<h2 id=\"3-注解\"><a class=\"markdownIt-Anchor\" href=\"#3-注解\">#</a> 3. 注解</h2>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">注解</th>\n<th style=\"text-align:right\">使用位置</th>\n<th style=\"text-align:center\">使用效果</th>\n<th style=\"text-align:center\">注解属性</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">@Data</td>\n<td style=\"text-align:right\">类</td>\n<td style=\"text-align:center\">为类的字段生成 get,set 方法，重写类的 equals,toString 和 hashCode 方法</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">@Value</td>\n<td style=\"text-align:right\">字段，类</td>\n<td style=\"text-align:center\">效果相当于 java17 的 record 类</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">@Getter</td>\n<td style=\"text-align:right\">字段，类</td>\n<td style=\"text-align:center\">为类的字段生成 get 方法</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">@Setter</td>\n<td style=\"text-align:right\">字段，类</td>\n<td style=\"text-align:center\">为类的字段生成 set 方法</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">@EqualsAndHashCode</td>\n<td style=\"text-align:right\">类</td>\n<td style=\"text-align:center\">重写类的 equals 和 hashCode 方法</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">@ToString</td>\n<td style=\"text-align:right\">类</td>\n<td style=\"text-align:center\">重写类的 toString 方法</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">@AllArgsConstructor</td>\n<td style=\"text-align:right\">类</td>\n<td style=\"text-align:center\">为类全参构造函数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">@NoArgsConstructor</td>\n<td style=\"text-align:right\">类</td>\n<td style=\"text-align:center\">为类生成无参构造函数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">@RequiredArgsConstructor</td>\n<td style=\"text-align:right\">类</td>\n<td style=\"text-align:center\">为类生成有参构造函数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">@Builder</td>\n<td style=\"text-align:right\">类</td>\n<td style=\"text-align:center\">自动生成构造者模式代码</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">@val</td>\n<td style=\"text-align:right\">常量声明</td>\n<td style=\"text-align:center\">根据赋值推断出常量类型</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">@var</td>\n<td style=\"text-align:right\">变量声明</td>\n<td style=\"text-align:center\">根据赋值推断出常量类型 (等效 java11 的 var 关键字)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">@With</td>\n<td style=\"text-align:right\">字段，类</td>\n<td style=\"text-align:center\">作用于类、变量，生成 with + 变量名的方法，返回当前对象</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">@CustomLog</td>\n<td style=\"text-align:right\">类</td>\n<td style=\"text-align:center\">自定义日志类，生成 log 对象</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">@NonNull</td>\n<td style=\"text-align:right\"></td>\n<td style=\"text-align:center\">作用于成员变量和参数中，标识不能为空，否则抛出空指针异常</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">@Generated</td>\n<td style=\"text-align:right\"></td>\n<td style=\"text-align:center\">用于标记类、变量、方法是自动生成的，没什么大用</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">@Cleanup</td>\n<td style=\"text-align:right\">变量</td>\n<td style=\"text-align:center\">自动关闭资源，针对实现了 java.io.Closeable 接口的对象有效</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">@Synchronized</td>\n<td style=\"text-align:right\">方法</td>\n<td style=\"text-align:center\">作用于方法，可以替换 synchronized 关键字或 lock 锁</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">@SneakyThrows</td>\n<td style=\"text-align:right\">方法</td>\n<td style=\"text-align:center\">作用于方法，对异常进行捕捉并抛出</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">@Singular</td>\n<td style=\"text-align:right\">集合字段</td>\n<td style=\"text-align:center\">作用于集合字段，需要配合 @Builder 使用，加入了 @Singular 注解后，lombok 为我们添加了一个为集合添加元素的方法</td>\n</tr>\n</tbody>\n</table>\n<p>@CommonsLog，@Log，@JBossLog，@Log4j，@Log4j2，@Slf4j，@XSlf4j：日志注解，作用于类</p>\n<h2 id=\"4-实验性注解的使用\"><a class=\"markdownIt-Anchor\" href=\"#4-实验性注解的使用\">#</a> 4. 实验性注解的使用</h2>\n<p>@Accessors：类似于 @Builder 支持链式调用，需要配合 @Setter、@Getter 等注解使用，作用于类、变量<br>\n @Delegate：作用于容器变量，为该变量生成一堆常用的方法，这些方法都是容器中的方法<br>\n @ExtensionMethod：作用于类，向类添加方法，无需创建新的子类<br>\n @FieldDefaults：作用于类，定义变量的访问修饰符以及是否加 final<br>\n@FieldNameConstants：作用于类，生成一个包含所有成员变量的内部类或者内部枚举，内部类中每个字段值即为字段名并且值不可变<br>\n @Helper：作用于方法内部类，使内部类中的方法暴露在外面可以被直接调用，不建议使用<br>\n @NonFinal：作用于类、变量，表示变量不加 final<br>\n@PackagePrivate：作用于类和变量，相当于访问修饰符的 default，没什么用<br>\n @SuperBuilder：支持对于基类成员变量赋值，算是 @Builder 的升级版<br>\n @Tolerate：实现对冲突的兼容，作用于方法上，没什么大用，可以配合 @Builder 使用<br>\n @UtilityClass：作用于类，将类标记为 final，并且类、内部类中的方法、字段都标记为 static<br>\n@WithBy3<br>\n 六、基于 v1.18.22 版本的实验性注解<br>\n @StandardException：自定义异常类</p>\n",
            "tags": [
                "lombok",
                "java"
            ]
        },
        {
            "id": "http://example.com/2024/02/06/java/%E5%AF%B9PageHelper%E4%BD%BF%E7%94%A8%E7%9A%84%E5%B0%81%E8%A3%85/",
            "url": "http://example.com/2024/02/06/java/%E5%AF%B9PageHelper%E4%BD%BF%E7%94%A8%E7%9A%84%E5%B0%81%E8%A3%85/",
            "title": "对PageHelper使用的封装",
            "date_published": "2024-02-06T09:27:01.000Z",
            "content_html": "<h2 id=\"1-问题点\"><a class=\"markdownIt-Anchor\" href=\"#1-问题点\">#</a> 1. 问题点</h2>\n<p>在使用 PageHelper 的过程中，产生了两个问题</p>\n<ul>\n<li>\n<ol>\n<li>一个分页接口点击下一页时，绝大多数的情况下数据总数是不变的，但却需要每次请求去查询统计数据总数，产生了性能浪费.</li>\n</ol>\n</li>\n<li>\n<ol start=\"2\">\n<li>实际使用中要实现分页要写两步，先在要执行分页的代码前标注 <code>PageHelper.startPage(vo);</code> , 再在返回数据时使用 <code>PageInfo.of(list)</code>  生成分页对象，步骤略微麻烦.</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"2-代码\"><a class=\"markdownIt-Anchor\" href=\"#2-代码\">#</a> 2. 代码</h2>\n<p>分页参数基础类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.china315net.common.vo;<br><br><span class=\"hljs-keyword\">import</span> io.swagger.annotations.ApiModelProperty;<br><span class=\"hljs-keyword\">import</span> lombok.Data;<br><br><span class=\"hljs-keyword\">import</span> <span class=\"hljs-keyword\">static</span> com.china315net.common.constant.ConstantPool.MAX_PAGE_SIZE;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 基本分页对象</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Data</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BasePageVO</span> &#123;<br>    <span class=\"hljs-meta\">@ApiModelProperty(value = &quot;当前页&quot;)</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">Integer</span> <span class=\"hljs-variable\">pageNum</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>;<br><br>    <span class=\"hljs-meta\">@ApiModelProperty(value = &quot;当页显示条数&quot;)</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">Integer</span> <span class=\"hljs-variable\">pageSize</span> <span class=\"hljs-operator\">=</span>  <span class=\"hljs-number\">10</span>;<br><br>    <span class=\"hljs-meta\">@ApiModelProperty(value = &quot;总页数&quot;)</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">Integer</span> <span class=\"hljs-variable\">totalRow</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setPageSize</span><span class=\"hljs-params\">(Integer pageSize)</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (pageSize &gt; MAX_PAGE_SIZE) &#123;<br>            <span class=\"hljs-built_in\">this</span>.pageSize = MAX_PAGE_SIZE;<br>            <span class=\"hljs-keyword\">return</span>;<br>        &#125;<br>        <span class=\"hljs-built_in\">this</span>.pageSize = pageSize;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>分页工具类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.china315net.mybatis.util;<br><br><span class=\"hljs-keyword\">import</span> com.china315net.common.vo.BasePageVO;<br><span class=\"hljs-keyword\">import</span> com.github.pagehelper.ISelect;<br><span class=\"hljs-keyword\">import</span> com.github.pagehelper.PageHelper;<br><span class=\"hljs-keyword\">import</span> com.github.pagehelper.PageInfo;<br><br><span class=\"hljs-keyword\">import</span> java.util.List;<br><span class=\"hljs-keyword\">import</span> java.util.function.Function;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">PageUtil</span> &#123;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> &lt;T, P <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">BasePageVO</span>&gt; PageInfo&lt;T&gt; <span class=\"hljs-title function_\">doPage</span><span class=\"hljs-params\">(P param, Function&lt;P,List&lt;T&gt;&gt; function)</span> &#123;<br>        <span class=\"hljs-type\">ISelect</span> <span class=\"hljs-variable\">select</span> <span class=\"hljs-operator\">=</span> () -&gt; function.apply(param);<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">total</span> <span class=\"hljs-operator\">=</span> param.getTotalRow();<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">pageNum</span> <span class=\"hljs-operator\">=</span> param.getPageNum();<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">pageSize</span> <span class=\"hljs-operator\">=</span> param.getPageSize();<br>        PageInfo&lt;T&gt; pageInfo;<br>        <span class=\"hljs-comment\">//最后一页强制触发分页条件</span><br>        <span class=\"hljs-keyword\">if</span> (pageNum*pageSize &gt;= total) &#123;<br>            pageInfo = PageHelper.startPage(param).doSelectPageInfo(select);<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            pageInfo = PageHelper.startPage(param).setCount(<span class=\"hljs-literal\">false</span>).doSelectPageInfo(select);<br>            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">nowTotal</span> <span class=\"hljs-operator\">=</span> (pageNum-<span class=\"hljs-number\">1</span>)*pageSize + pageInfo.getSize();<br>            <span class=\"hljs-comment\">//当前页未满且不是最后一页,设置数据总数为当前数据总数</span><br>            <span class=\"hljs-keyword\">if</span> (pageNum*pageSize &gt; nowTotal) &#123;<br>                total = nowTotal;<br>            &#125;<br>            pageInfo.setTotal(total);<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> pageInfo;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"3-使用\"><a class=\"markdownIt-Anchor\" href=\"#3-使用\">#</a> 3. 使用</h2>\n<p>使用的示例代码如下</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs less\"><span class=\"hljs-variable\">@ApiOperation</span>(value = <span class=\"hljs-string\">&quot;列表查询&quot;</span>)<br><span class=\"hljs-variable\">@GetMapping</span>(<span class=\"hljs-string\">&quot;/list&quot;</span>)<br>public ResultBean&lt;PageInfo&lt;BlendingFormulaVO&gt;&gt; <span class=\"hljs-built_in\">list</span>(BlendingFormulaSearchVO search) &#123;<br>    <span class=\"hljs-selector-tag\">return</span> <span class=\"hljs-selector-tag\">ResultBean</span><span class=\"hljs-selector-class\">.success</span>(PageUtil.<span class=\"hljs-built_in\">doPage</span>(search, <span class=\"hljs-attribute\">blendingFormulaService</span>::listPage));<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"4-工具类效果\"><a class=\"markdownIt-Anchor\" href=\"#4-工具类效果\">#</a> 4. 工具类效果</h2>\n<ul>\n<li>\n<ol>\n<li>当前页为最后一页强制触发查询数据总数</li>\n</ol>\n</li>\n<li>\n<ol start=\"2\">\n<li>当前页未满时说明数据库数据总数为当前分页计算出的数据总数，设置数据总数为当前当前分页计算出数据总数</li>\n</ol>\n</li>\n<li>\n<ol start=\"3\">\n<li>不满足上面两条且前端传了分页总数的情况，不会去查询数据总数</li>\n</ol>\n</li>\n</ul>\n",
            "tags": [
                "PageHelper"
            ]
        }
    ]
}