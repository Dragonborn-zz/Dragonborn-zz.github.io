{
    "version": "https://jsonfeed.org/version/1",
    "title": "Dragonborn-zz's个人博客 • All posts by \"java\" tag",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2024/02/18/java/lombok%E7%9A%84%E4%BD%BF%E7%94%A8/",
            "url": "http://example.com/2024/02/18/java/lombok%E7%9A%84%E4%BD%BF%E7%94%A8/",
            "title": "lombok的使用",
            "date_published": "2024-02-18T03:28:48.555Z",
            "content_html": "<h2 id=\"1-引入\"><a class=\"markdownIt-Anchor\" href=\"#1-引入\">#</a> 1. 引入</h2>\n<p>java 项目引入</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.projectlombok<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>lombok<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.18.24<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span> <span class=\"hljs-comment\">&lt;!-- Spring Boot 项目此部分可以不写 --&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>Android 项目引入</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\"><span class=\"hljs-keyword\">implementation</span> <span class=\"hljs-string\">&quot;org.projectlombok:lombok:1.18.24&quot;</span><br>annotationProcessor <span class=\"hljs-string\">&quot;org.projectlombok:lombok:1.18.24&quot;</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"2-配置文件\"><a class=\"markdownIt-Anchor\" href=\"#2-配置文件\">#</a> 2. 配置文件</h2>\n<p>lombok 的配置文件名为 lombok.config, 生效的作用域为其所在的目录和其子目录</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs lombok.config\">#指明lombok的根目录为当前配置文件所在目录<br>config.stopBubbling=true<br># 解决子类对象属性值一致，但其继承的父类对象属性值不一致，在比较的时候会出现比较结果不对的情况<br>lombok.equalsAndHashCode.callSuper=call<br># 使子类的toString方法包括其继承的父类对象属性值<br>lombok.toString.callSuper = call<br>#生成的set方法返回由null改为this,可以链式调用<br>#lombok.accessors.chain=true<br></code></pre></td></tr></table></figure>\n<h2 id=\"3-注解\"><a class=\"markdownIt-Anchor\" href=\"#3-注解\">#</a> 3. 注解</h2>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">注解</th>\n<th style=\"text-align:right\">使用位置</th>\n<th style=\"text-align:center\">使用效果</th>\n<th style=\"text-align:center\">注解属性</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">@Data</td>\n<td style=\"text-align:right\">类</td>\n<td style=\"text-align:center\">为类的字段生成 get,set 方法，重写类的 equals,toString 和 hashCode 方法</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">@Value</td>\n<td style=\"text-align:right\">字段，类</td>\n<td style=\"text-align:center\">效果相当于 java17 的 record 类</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">@Getter</td>\n<td style=\"text-align:right\">字段，类</td>\n<td style=\"text-align:center\">为类的字段生成 get 方法</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">@Setter</td>\n<td style=\"text-align:right\">字段，类</td>\n<td style=\"text-align:center\">为类的字段生成 set 方法</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">@EqualsAndHashCode</td>\n<td style=\"text-align:right\">类</td>\n<td style=\"text-align:center\">重写类的 equals 和 hashCode 方法</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">@ToString</td>\n<td style=\"text-align:right\">类</td>\n<td style=\"text-align:center\">重写类的 toString 方法</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">@AllArgsConstructor</td>\n<td style=\"text-align:right\">类</td>\n<td style=\"text-align:center\">为类全参构造函数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">@NoArgsConstructor</td>\n<td style=\"text-align:right\">类</td>\n<td style=\"text-align:center\">为类生成无参构造函数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">@RequiredArgsConstructor</td>\n<td style=\"text-align:right\">类</td>\n<td style=\"text-align:center\">为类生成有参构造函数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">@Builder</td>\n<td style=\"text-align:right\">类</td>\n<td style=\"text-align:center\">自动生成构造者模式代码</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">@val</td>\n<td style=\"text-align:right\">常量声明</td>\n<td style=\"text-align:center\">根据赋值推断出常量类型</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">@var</td>\n<td style=\"text-align:right\">变量声明</td>\n<td style=\"text-align:center\">根据赋值推断出常量类型 (等效 java11 的 var 关键字)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">@With</td>\n<td style=\"text-align:right\">字段，类</td>\n<td style=\"text-align:center\">作用于类、变量，生成 with + 变量名的方法，返回当前对象</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">@CustomLog</td>\n<td style=\"text-align:right\">类</td>\n<td style=\"text-align:center\">自定义日志类，生成 log 对象</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">@NonNull</td>\n<td style=\"text-align:right\"></td>\n<td style=\"text-align:center\">作用于成员变量和参数中，标识不能为空，否则抛出空指针异常</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">@Generated</td>\n<td style=\"text-align:right\"></td>\n<td style=\"text-align:center\">用于标记类、变量、方法是自动生成的，没什么大用</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">@Cleanup</td>\n<td style=\"text-align:right\">变量</td>\n<td style=\"text-align:center\">自动关闭资源，针对实现了 java.io.Closeable 接口的对象有效</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">@Synchronized</td>\n<td style=\"text-align:right\">方法</td>\n<td style=\"text-align:center\">作用于方法，可以替换 synchronized 关键字或 lock 锁</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">@SneakyThrows</td>\n<td style=\"text-align:right\">方法</td>\n<td style=\"text-align:center\">作用于方法，对异常进行捕捉并抛出</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">@Singular</td>\n<td style=\"text-align:right\">集合字段</td>\n<td style=\"text-align:center\">作用于集合字段，需要配合 @Builder 使用，加入了 @Singular 注解后，lombok 为我们添加了一个为集合添加元素的方法</td>\n</tr>\n</tbody>\n</table>\n<p>@CommonsLog，@Log，@JBossLog，@Log4j，@Log4j2，@Slf4j，@XSlf4j：日志注解，作用于类</p>\n<h2 id=\"4-实验性注解的使用\"><a class=\"markdownIt-Anchor\" href=\"#4-实验性注解的使用\">#</a> 4. 实验性注解的使用</h2>\n<p>@Accessors：类似于 @Builder 支持链式调用，需要配合 @Setter、@Getter 等注解使用，作用于类、变量<br>\n @Delegate：作用于容器变量，为该变量生成一堆常用的方法，这些方法都是容器中的方法<br>\n @ExtensionMethod：作用于类，向类添加方法，无需创建新的子类<br>\n @FieldDefaults：作用于类，定义变量的访问修饰符以及是否加 final<br>\n@FieldNameConstants：作用于类，生成一个包含所有成员变量的内部类或者内部枚举，内部类中每个字段值即为字段名并且值不可变<br>\n @Helper：作用于方法内部类，使内部类中的方法暴露在外面可以被直接调用，不建议使用<br>\n @NonFinal：作用于类、变量，表示变量不加 final<br>\n@PackagePrivate：作用于类和变量，相当于访问修饰符的 default，没什么用<br>\n @SuperBuilder：支持对于基类成员变量赋值，算是 @Builder 的升级版<br>\n @Tolerate：实现对冲突的兼容，作用于方法上，没什么大用，可以配合 @Builder 使用<br>\n @UtilityClass：作用于类，将类标记为 final，并且类、内部类中的方法、字段都标记为 static<br>\n@WithBy3<br>\n 六、基于 v1.18.22 版本的实验性注解<br>\n @StandardException：自定义异常类</p>\n",
            "tags": [
                "lombok",
                "java"
            ]
        },
        {
            "id": "http://example.com/2023/01/09/java/MyBatis%E4%B9%8BTypeHandler%E7%94%A8%E6%B3%95/",
            "url": "http://example.com/2023/01/09/java/MyBatis%E4%B9%8BTypeHandler%E7%94%A8%E6%B3%95/",
            "title": "MyBatis之TypeHandler用法",
            "date_published": "2023-01-09T08:16:03.000Z",
            "content_html": "<h2 id=\"一-问题点\"><a class=\"markdownIt-Anchor\" href=\"#一-问题点\">#</a> 一。问题点</h2>\n<h2 id=\"在使用postgresql的过程中有用到数组类型与json类型这些类型直接用java的类型去接收是会出现类型转换异常的怎么处理呢这时候就要用到typehandler了\"><a class=\"markdownIt-Anchor\" href=\"#在使用postgresql的过程中有用到数组类型与json类型这些类型直接用java的类型去接收是会出现类型转换异常的怎么处理呢这时候就要用到typehandler了\">#</a> 在使用 PostgreSQL 的过程中有用到数组类型与 json 类型，这些类型直接用 java 的类型去接收是会出现类型转换异常的，<br>\n 怎么处理呢，这时候就要用到 TypeHandler 了</h2>\n<h2 id=\"二-代码\"><a class=\"markdownIt-Anchor\" href=\"#二-代码\">#</a> 二。代码</h2>\n<ul>\n<li>java 数组类型接收 jdbc array</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.china315net.mybatis.handler;<br><br><span class=\"hljs-keyword\">import</span> lombok.extern.slf4j.Slf4j;<br><span class=\"hljs-keyword\">import</span> org.apache.ibatis.type.JdbcType;<br><span class=\"hljs-keyword\">import</span> org.apache.ibatis.type.MappedJdbcTypes;<br><span class=\"hljs-keyword\">import</span> org.apache.ibatis.type.MappedTypes;<br><span class=\"hljs-keyword\">import</span> org.apache.ibatis.type.TypeException;<br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Component;<br><br><span class=\"hljs-keyword\">import</span> java.sql.Array;<br><span class=\"hljs-keyword\">import</span> java.sql.PreparedStatement;<br><span class=\"hljs-keyword\">import</span> java.sql.SQLException;<br><br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 数组类型处理程序</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-meta\">@MappedJdbcTypes(&#123;JdbcType.ARRAY&#125;)</span><br><span class=\"hljs-meta\">@MappedTypes(&#123;String[].class, Short[].class, Integer[].class, Long[].class&#125;)</span><br><span class=\"hljs-meta\">@Component</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ArrayTypeHandler</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">org</span>.apache.ibatis.type.ArrayTypeHandler &#123;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setNonNullParameter</span><span class=\"hljs-params\">(PreparedStatement ps, <span class=\"hljs-type\">int</span> i, Object parameter, JdbcType jdbcType)</span> <span class=\"hljs-keyword\">throws</span> SQLException &#123;<br>        log.debug(<span class=\"hljs-string\">&quot;jdbcType:&#123;&#125;&quot;</span>, jdbcType);<br>        <span class=\"hljs-keyword\">if</span> (parameter <span class=\"hljs-keyword\">instanceof</span> Array array) &#123;<br>            ps.setArray(i, array);<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            <span class=\"hljs-keyword\">if</span> (!parameter.getClass().isArray()) &#123;<br>                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TypeException</span>(<span class=\"hljs-string\">&quot;ArrayType Handler requires SQL array or java array parameter and does not support type &quot;</span> + parameter.getClass());<br>            &#125;<br>            Class&lt;?&gt; componentType = parameter.getClass().getComponentType();<br>            <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">arrayTypeName</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-built_in\">this</span>.resolveTypeName(componentType);<br>            <span class=\"hljs-type\">Array</span> <span class=\"hljs-variable\">array</span> <span class=\"hljs-operator\">=</span> ps.getConnection().createArrayOf(arrayTypeName, (Object[]) parameter);<br>            ps.setArray(i, array);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>java List 类型接收 jdbc array</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.china315net.mybatis.handler;<br><br><span class=\"hljs-keyword\">import</span> lombok.extern.slf4j.Slf4j;<br><span class=\"hljs-keyword\">import</span> org.apache.ibatis.type.JdbcType;<br><span class=\"hljs-keyword\">import</span> org.apache.ibatis.type.MappedJdbcTypes;<br><span class=\"hljs-keyword\">import</span> org.apache.ibatis.type.MappedTypes;<br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Component;<br><br><span class=\"hljs-keyword\">import</span> java.sql.Array;<br><span class=\"hljs-keyword\">import</span> java.sql.CallableStatement;<br><span class=\"hljs-keyword\">import</span> java.sql.PreparedStatement;<br><span class=\"hljs-keyword\">import</span> java.sql.ResultSet;<br><span class=\"hljs-keyword\">import</span> java.sql.SQLException;<br><span class=\"hljs-keyword\">import</span> java.util.Arrays;<br><span class=\"hljs-keyword\">import</span> java.util.List;<br><br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 数组类型处理程序</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-meta\">@MappedJdbcTypes(&#123;JdbcType.ARRAY&#125;)</span><br><span class=\"hljs-meta\">@MappedTypes(&#123;List.class&#125;)</span><br><span class=\"hljs-meta\">@Component</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ListToArrayTypeHandler</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">org</span>.apache.ibatis.type.ArrayTypeHandler &#123;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setNonNullParameter</span><span class=\"hljs-params\">(PreparedStatement ps, <span class=\"hljs-type\">int</span> i, Object parameter, JdbcType jdbcType)</span> <span class=\"hljs-keyword\">throws</span> SQLException &#123;<br>        <span class=\"hljs-keyword\">if</span> (parameter <span class=\"hljs-keyword\">instanceof</span> List&lt;?&gt; list) &#123;<br>            <span class=\"hljs-keyword\">if</span> (!list.isEmpty()) &#123;<br>                <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">arrayTypeName</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-built_in\">this</span>.resolveTypeName(list.get(<span class=\"hljs-number\">0</span>).getClass());<br>                <span class=\"hljs-type\">Array</span> <span class=\"hljs-variable\">array</span> <span class=\"hljs-operator\">=</span> ps.getConnection().createArrayOf(arrayTypeName, list.toArray(Object[]::<span class=\"hljs-keyword\">new</span>));<br>                ps.setArray(i, array);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title function_\">getNullableResult</span><span class=\"hljs-params\">(ResultSet rs, String columnName)</span> <span class=\"hljs-keyword\">throws</span> SQLException &#123;<br>        log.debug(<span class=\"hljs-string\">&quot;getNullableResult1&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.extractList(rs.getArray(columnName));<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title function_\">getNullableResult</span><span class=\"hljs-params\">(ResultSet rs, <span class=\"hljs-type\">int</span> columnIndex)</span> <span class=\"hljs-keyword\">throws</span> SQLException &#123;<br>        log.debug(<span class=\"hljs-string\">&quot;getNullableResult2&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.extractList(rs.getArray(columnIndex));<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title function_\">getNullableResult</span><span class=\"hljs-params\">(CallableStatement cs, <span class=\"hljs-type\">int</span> columnIndex)</span> <span class=\"hljs-keyword\">throws</span> SQLException &#123;<br>        log.debug(<span class=\"hljs-string\">&quot;getNullableResult3&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.extractList(cs.getArray(columnIndex));<br>    &#125;<br><br>    <span class=\"hljs-keyword\">private</span> Object <span class=\"hljs-title function_\">extractList</span><span class=\"hljs-params\">(Array array)</span> <span class=\"hljs-keyword\">throws</span> SQLException &#123;<br>        <span class=\"hljs-keyword\">return</span> Arrays.stream(((Object[]) extractArray(array))).toList();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>java 使用 FastJson2 的 JSONObject,JSONArray 类型接收 pgsql 的 json 或 jsonb</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.china315net.mybatis.handler;<br><br><span class=\"hljs-keyword\">import</span> com.alibaba.fastjson2.JSON;<br><span class=\"hljs-keyword\">import</span> com.alibaba.fastjson2.JSONArray;<br><span class=\"hljs-keyword\">import</span> com.alibaba.fastjson2.JSONObject;<br><span class=\"hljs-keyword\">import</span> org.apache.ibatis.type.BaseTypeHandler;<br><span class=\"hljs-keyword\">import</span> org.apache.ibatis.type.JdbcType;<br><span class=\"hljs-keyword\">import</span> org.apache.ibatis.type.MappedTypes;<br><span class=\"hljs-keyword\">import</span> org.postgresql.util.PGobject;<br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Component;<br><br><span class=\"hljs-keyword\">import</span> java.sql.CallableStatement;<br><span class=\"hljs-keyword\">import</span> java.sql.PreparedStatement;<br><span class=\"hljs-keyword\">import</span> java.sql.ResultSet;<br><span class=\"hljs-keyword\">import</span> java.sql.SQLException;<br><br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * json类型处理程序</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@MappedTypes(&#123;JSONObject.class, JSONArray.class&#125;)</span><br><span class=\"hljs-meta\">@Component</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">JsonbTypeHandler</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">BaseTypeHandler</span>&lt;Object&gt; &#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setNonNullParameter</span><span class=\"hljs-params\">(PreparedStatement ps, <span class=\"hljs-type\">int</span> i, Object parameter, JdbcType jdbcType)</span> <span class=\"hljs-keyword\">throws</span> SQLException &#123;<br>        <span class=\"hljs-type\">PGobject</span> <span class=\"hljs-variable\">jsonObject</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">PGobject</span>();<br>        jsonObject.setType(<span class=\"hljs-string\">&quot;json&quot;</span>);<br>        jsonObject.setValue(JSON.toJSONString(parameter));<br>        ps.setObject(i, jsonObject);<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title function_\">getNullableResult</span><span class=\"hljs-params\">(ResultSet rs, String columnName)</span> <span class=\"hljs-keyword\">throws</span> SQLException &#123;<br>        <span class=\"hljs-keyword\">return</span> JSON.parse(rs.getString(columnName));<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title function_\">getNullableResult</span><span class=\"hljs-params\">(ResultSet rs, <span class=\"hljs-type\">int</span> columnIndex)</span> <span class=\"hljs-keyword\">throws</span> SQLException &#123;<br>        <span class=\"hljs-keyword\">return</span> JSON.parse(rs.getString(columnIndex));<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title function_\">getNullableResult</span><span class=\"hljs-params\">(CallableStatement cs, <span class=\"hljs-type\">int</span> columnIndex)</span> <span class=\"hljs-keyword\">throws</span> SQLException &#123;<br>        <span class=\"hljs-keyword\">return</span> JSON.parse(cs.getString(columnIndex));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"注意点\"><a class=\"markdownIt-Anchor\" href=\"#注意点\">#</a> 注意点:</h2>\n<h3 id=\"typehandler接口方法说明\"><a class=\"markdownIt-Anchor\" href=\"#typehandler接口方法说明\">#</a> TypeHandler 接口方法说明</h3>\n<ul>\n<li>setNonNullParameter 方法在写入的数据库操作时会调用</li>\n<li>getNullableResult 方法在查询的数据库操作时会调用</li>\n</ul>\n<hr>\n<h3 id=\"类型处理器支持的java与jdbc类型\"><a class=\"markdownIt-Anchor\" href=\"#类型处理器支持的java与jdbc类型\">#</a> 类型处理器支持的 Java 与 jdbc 类型</h3>\n<ul>\n<li>\n<h4 id=\"如果要决定一个类型处理器支持哪些java类型有如下途径优先级从上到下依次增加\"><a class=\"markdownIt-Anchor\" href=\"#如果要决定一个类型处理器支持哪些java类型有如下途径优先级从上到下依次增加\">#</a> 如果要决定一个类型处理器支持哪些<strong> Java</strong> 类型，有如下途径 (优先级从上到下依次增加)。</h4>\n<ul>\n<li>\n<ol>\n<li>类型处理器的泛型可以决定类型处理器支持的<strong> JavaType</strong>；</li>\n</ol>\n</li>\n<li>\n<ol start=\"2\">\n<li>在类型处理器上使用注解 @<strong>MappedTypes</strong> 来指定，例如 @<strong>MappedTypes({List.class})</strong>；</li>\n</ol>\n</li>\n<li>\n<ol start=\"3\">\n<li>在配置文件中注册类型处理器时，通过 &lt;<strong>typeHandler</strong> &gt; 标签的<strong> javaType</strong> 属性来指定，例如 <code>&lt;typeHandler handler=&quot;com.lee.learn.mybatis.typehandler.ListStringTypeHandler&quot; javaType=&quot;List&quot;/&gt;</code> 。</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>\n<h4 id=\"如果要决定一个类型处理器支持哪些jdbc类型有如下途径优先级从上到下依次增加\"><a class=\"markdownIt-Anchor\" href=\"#如果要决定一个类型处理器支持哪些jdbc类型有如下途径优先级从上到下依次增加\">#</a> 如果要决定一个类型处理器支持哪些<strong> Jdbc</strong> 类型，有如下途径 (优先级从上到下依次增加)。</h4>\n<ul>\n<li>\n<ol>\n<li>在类型处理器上使用注解 @<strong>MappedJdbcTypes</strong> 来指定，例如 @<strong>MappedJdbcTypes({JdbcType.VARCHAR, JdbcType.CHAR})</strong>；</li>\n</ol>\n</li>\n<li>\n<ol start=\"2\">\n<li>在配置文件中注册类型处理器时，通过 &lt;<strong>typeHandler</strong> &gt; 标签的<strong> jdbcType</strong> 属性来指定（注意：同时也需要设置了<strong> javaType</strong><br>\n 属性，否则<strong> jdbcType</strong> 属性不生效）， 例如 &lt;<strong>typeHandler handler=&quot;<br>\ncom.lee.learn.mybatis.typehandler.ListStringTypeHandler&quot; javaType=“List” jdbcType=“VARCHAR”/</strong>&gt;。</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"typehandler如何生效\"><a class=\"markdownIt-Anchor\" href=\"#typehandler如何生效\">#</a> TypeHandler 如何生效</h3>\n<p>通常，<strong>TypeHandler</strong> 的使用场景有两个。</p>\n<ol>\n<li>在设置预处理语句（<strong>PreparedStatement</strong>）中的参数时，完成<strong> Java</strong> 类型到<strong> Jdbc</strong> 类型的转换，通常就是<strong> INSERT</strong> 和<strong> UPDATE</strong><br>\n 的场景；</li>\n<li>在将查询到的结果记录映射到<strong> Java</strong> 实体对象时，完成<strong> Jdbc</strong> 类型到<strong> Java</strong> 类型的转换，通常就是会使用到 &lt;<strong>resultMap</strong><br>\n &gt; 的场景。</li>\n</ol>\n<p>在使用场景下，如何让我们自定义的<strong> TypeHandler</strong> 生效，如下直接给出结论，再做验证。</p>\n<ol>\n<li><strong>显式使用</strong>。示例中就是显示使用，即在 &lt;<strong>result</strong> &gt; 标签中和 <code>#&#123;&#125;</code>  占位符中使用<strong> typeHandler</strong><br>\n 属性来指定使用的类型处理器，这种方式是最简单粗暴的，就算不在配置文件中注册类型处理器，就算没有为类型处理器配置任何支持的<br>\n<strong> Jdbc</strong> 类型，只要在 &lt;<strong>result</strong> &gt; 标签中和 <code>#&#123;&#125;</code>  占位符中使用了<strong> typeHandler</strong> 属性来指定要使用的类型处理器，那么 **MyBatis<br>\n** 就会使用这个类型处理器；</li>\n<li><strong>隐式使用</strong>。通常，我们是不会关注到<strong> TypeHandler</strong> 的，然而大部分时候<strong> Java</strong> 类型到<strong> Jdbc</strong> 类型的相互转换都能成功完成，是因为<br>\n<strong> MyBatis</strong> 会隐式使用其内置的<strong> TypeHandler</strong>，而隐式使用哪个内置<strong> TypeHandler</strong>，是通过 &lt;<strong>result</strong> &gt; 标签和 <code>#&#123;&#125;</code>  占位符的<br>\n<strong> JavaType</strong> 和<strong> JdbcType</strong> 进行推断的。</li>\n</ol>\n<p><strong>显式使用</strong>没什么好说的，最为简单明了。下面重点说一下<strong>隐式使用</strong>。</p>\n<p>首先能够被隐式使用的<strong> TypeHandler</strong>，都需要完成注册，自定义的<strong> TypeHandler</strong> 可以在配置文件中通过 &lt;<strong>typeHandler</strong><br>\n &gt; 标签注册，而内置的<strong> TypeHandler</strong> 是在<strong> TypeHandlerRegistry#TypeHandlerRegistry</strong> 方法完成的注册，这个方法有点长，这里不再展示。</p>\n<p>然后每一个<strong> TypeHandler</strong> 都有其支持的<strong> Java</strong> 类型，以及可能支持的<strong> Jdbc</strong> 类型（也可能没有），<strong>TypeHandler</strong> 注册到 **MyBatis<br>\n** 中后，是按照如下形式存储的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">Map&lt;JavaType, Map&lt;JdbcType, TypeHandler&gt;&gt;<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> Map&lt;Type, Map&lt;JdbcType, TypeHandler&lt;?&gt;&gt;&gt;typeHandlerMap=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ConcurrentHashMap</span>&lt;&gt;();<br></code></pre></td></tr></table></figure>\n<p>对隐式使用<strong> TypeHandler</strong> 做一个小结。</p>\n<ol>\n<li>每一个<strong> TypeHandler</strong> 都有其支持的<strong> Java</strong> 类型，以及可能支持的<strong> Jdbc</strong> 类型（也可能没有），并且在<strong> MyBatis</strong> 中以 *<br>\n<em>Map&lt;JavaType, Map&lt;JdbcType, TypeHandler&gt;&gt;</em>* 的形式存放；</li>\n<li>如果有多个<strong> TypeHandler</strong> 的支持的<strong> Java</strong> 类型和<strong> Jdbc</strong> 类型都一样，则后注册的<strong> TypeHandler</strong> 会覆盖先注册的 *<br>\n<em>TypeHandler</em>*；</li>\n<li>如果在<strong> MyBatis</strong> 的参数占位符 <code>#&#123;&#125;</code>  或者结果映射标签 &lt;<strong>result</strong> &gt; 中通过<strong> javaType</strong> 属性指定了<strong> JavaType</strong>，则<strong> MyBatis</strong><br>\n 在推断使用哪种<strong> TypeHandler</strong> 时依据的<strong> JavaType</strong> 会使用<strong> javaType</strong> 属性的值，否则，如果是 &lt;<strong>result</strong> &gt; 的话则<strong> MyBatis</strong><br>\n 能根据映射对象推断出<strong> JavaType</strong>，如果是 <code>#&#123;&#125;</code>  的话则<strong> JavaType</strong> 为<strong> Object</strong>；</li>\n<li>如果在<strong> MyBatis</strong> 的参数占位符 <code>#&#123;&#125;</code>  或者结果映射标签 &lt;<strong>result</strong> &gt; 中通过<strong> jdbcType</strong> 属性指定了<strong> JdbcType</strong>，则<strong> MyBatis</strong><br>\n 在推断使用哪种<strong> TypeHandler</strong> 时依据的<strong> JdbcType</strong> 会使用<strong> jdbcType</strong> 属性的值，否则依据的<strong> JdbcType</strong> 会为<strong> null</strong>；</li>\n<li><strong>MyBatis</strong> 在推断使用哪个<strong> TypeHandler</strong> 时，会先使用<strong> JavaType</strong> 拿到<strong> JavaType</strong> 对应的<strong> Map&lt;JdbcType,<br>\nTypeHandler&gt;</strong>，然后使用<strong> JdbcType</strong> 去匹配<strong> TypeHandler</strong>，匹配不到则再使用<strong> JdbcType=null</strong> 去匹配<strong> TypeHandler</strong><br>\n，如果还匹配不到，则判断<strong> JavaType</strong> 对应的<strong> TypeHandler</strong> 是否有多个，如果是多个则返回<strong> null</strong> 表示匹配失败，如果只有一个则使用这个<br>\n<strong> TypeHandler</strong>。</li>\n<li>spring 框架可以把 TypeHandler 实例注册到 IOC 容器，在使用时会根据类型去推断出要用哪个类型处理器</li>\n</ol>\n<h2 id=\"最后建议自定义的typehandler都要为其指定支持的javatype和jdbctype以及必要时在result标签和占位符中都把javatype和jdbctype属性配置上这样mybatis能够快速无误的帮我们推断出应该使用哪个类型处理器\"><a class=\"markdownIt-Anchor\" href=\"#最后建议自定义的typehandler都要为其指定支持的javatype和jdbctype以及必要时在result标签和占位符中都把javatype和jdbctype属性配置上这样mybatis能够快速无误的帮我们推断出应该使用哪个类型处理器\">#</a> 最后建议自定义的<strong> TypeHandler</strong> 都要为其指定支持的<strong> JavaType</strong> 和<strong> JdbcType</strong>，以及必要时在 &lt;<strong>result</strong> &gt; 标签和 <code>#&#123;&#125;</code>  占位符中都把<br>\n<strong> javaType</strong> 和<strong> jdbcType</strong> 属性配置上，这样<strong> MyBatis</strong> 能够快速无误的帮我们推断出应该使用哪个类型处理器。</h2>\n<h3 id=\"小补充\"><a class=\"markdownIt-Anchor\" href=\"#小补充\">#</a> 小补充</h3>\n<p>这里再对为参数占位符 <code>#&#123;&#125;</code>  推断类型处理器时的一些逻辑进行补充说明，不看也不影响对本篇文章的理解。</p>\n<p>为参数占位符 <code>#&#123;&#125;</code>  推断类型处理器时，如果没有通过<strong> javaType</strong> 来指定<strong> Java</strong> 类型，那么<strong> MyBatis</strong> 是无法知道<strong> Java</strong><br>\n 类型是什么的（而 &lt;<strong>result</strong> &gt; 标签是可以的，这是不同点），此时<strong> MyBatis</strong> 会默认<strong> Java</strong> 类型是<strong> Object</strong>，然后通过<strong> Object</strong> 这个<br>\n<strong> JavaType</strong> 拿到一个<strong> UnknownTypeHandler</strong> 内置类型处理器，下面看一下<strong> UnknownTypeHandler</strong> 的<strong> setNonNullParameter ()</strong> 方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Override</span> <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setNonNullParameter</span><span class=\"hljs-params\">(PreparedStatement ps, <span class=\"hljs-type\">int</span> i, Object parameter, JdbcType jdbcType)</span>         <span class=\"hljs-keyword\">throws</span> SQLException &#123;     <span class=\"hljs-type\">TypeHandler</span> <span class=\"hljs-variable\">handler</span> <span class=\"hljs-operator\">=</span> resolveTypeHandler(parameter, jdbcType);     handler.setParameter(ps, i, parameter, jdbcType); &#125;  <span class=\"hljs-keyword\">private</span> TypeHandler&lt;?&gt; resolveTypeHandler(Object parameter, JdbcType jdbcType) &#123;     TypeHandler&lt;?&gt; handler;     <span class=\"hljs-keyword\">if</span> (parameter == <span class=\"hljs-literal\">null</span>) &#123;         handler = OBJECT_TYPE_HANDLER;     &#125; <span class=\"hljs-keyword\">else</span> &#123;         <span class=\"hljs-comment\">// 根据需要设置到PreparedStatement中的参数判断出Java类型         // 然后再调用到TypeHandlerRegistry#getTypeHandler拿TypeHandler         handler = typeHandlerRegistrySupplier.get().getTypeHandler(parameter.getClass(), jdbcType);         if (handler == null || handler instanceof UnknownTypeHandler) &#123;             handler = OBJECT_TYPE_HANDLER;         &#125;     &#125;     return handler; &#125;</span><br></code></pre></td></tr></table></figure>\n<p>已知<strong> setNonNullParameter ()</strong> 方法是会在实际执行<strong> SQL</strong> 语句前被调用到，此时会完成<strong> PreparedStatement</strong> 的参数设置，因此这时能够拿到实际设置到<br>\n<strong> PreparedStatement</strong> 中的参数值从而得到参数的<strong> JavaType</strong>，所以这时会再尝试基于<strong> JavaType</strong> 和<strong> JdbcType</strong> 去匹配 *<br>\n<em>TypeHandler</em>*。</p>\n<p>所以本质上就算没有通过<strong> javaType</strong> 指定<strong> JavaType</strong>，&lt;<strong>result</strong> &gt; 标签和 <code>#&#123;&#125;</code>  参数占位符都是能够拿到<strong> JavaType</strong>，只不过 &lt;*<br>\n<em>result</em>*&gt; 标签在构建<strong> ResultMapping</strong> 时就能够拿到<strong> JavaType</strong>，而 <code>#&#123;&#125;</code>  参数占位符需要在<strong> SQL</strong> 语句实际执行前为 *<br>\n<em>PreparedStatement<strong> 设置参数时才能够拿到</strong> JavaType</em>*。</p>\n<p>那么按照本节的结论，为什么第四节最后的<strong>例子 1</strong> 中的 <code>#&#123;&#125;</code>  使用不到<strong> ListStringTypeHandler</strong> 呢，这是因为在为 *<br>\n<em>PreparedStatement<strong> 设置参数时，<strong>studentIntention</strong> 这个参数的实际类型是</strong> ArrayList</em>*，而不是<strong> List</strong>，但在<strong> MyBatis</strong> 中，认为<br>\n<strong> ListStringTypeHandler</strong> 是支持<strong> List</strong> 而不是<strong> ArrayList</strong> 的。</p>\n<h2 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结</h2>\n<p><strong>TypeHandler</strong> 能够帮助完成<strong> Java</strong> 类型到<strong> Jdbc</strong> 类型的相互转换，对于常规的转换，<strong>MyBatis</strong> 提供了内置的<strong> TypeHandler</strong><br>\n，而对于非常规的转换，需要自定义<strong> TypeHandler</strong>。自定义方式有两种，如下所示。</p>\n<ol>\n<li>实现<strong> TypeHandler</strong> 接口；</li>\n<li>继承<strong> BaseTypeHandler</strong> 抽象类。</li>\n</ol>\n<p>更推荐使用继承<strong> BaseTypeHandler</strong> 抽象类的方式来自定义<strong> TypeHandler</strong>。</p>\n<p>自定义的<strong> TypeHandler</strong> 有如下两种方式被使用。</p>\n<ol>\n<li>显示使用。在 &lt;<strong>result</strong> &gt; 标签或者 <code>#&#123;&#125;</code>  中通过<strong> typeHandler</strong> 属性指定要使用的<strong> TypeHandler</strong>；</li>\n<li>隐式使用。通过 &lt;<strong>result</strong> &gt; 标签或者 <code>#&#123;&#125;</code>  的<strong> JavaType</strong> 和<strong> JdbcType</strong>，由<strong> MyBatis</strong> 推断出需要使用的<strong> TypeHandler</strong>。</li>\n</ol>\n",
            "tags": [
                "java",
                "mybatis",
                "TypeHandler"
            ]
        }
    ]
}