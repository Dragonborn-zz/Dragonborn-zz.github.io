<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://example.com</id>
    <title>Dragonborn-zz&#39;s个人博客 • Posts by &#34;java&#34; tag</title>
    <link href="http://example.com" />
    <updated>2024-02-18T03:28:48.555Z</updated>
    <category term="docker" />
    <category term="gitlab" />
    <category term="maven" />
    <category term="lombok" />
    <category term="manifold" />
    <category term="nginx" />
    <category term="android" />
    <category term="gson" />
    <category term="bug" />
    <category term="java" />
    <category term="mybatis" />
    <category term="TypeHandler" />
    <category term="PageHelper" />
    <category term="git" />
    <category term="vim" />
    <entry>
        <id>http://example.com/2024/02/18/java/lombok%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
        <title>lombok的使用</title>
        <link rel="alternate" href="http://example.com/2024/02/18/java/lombok%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
        <content type="html">&lt;h2 id=&#34;1-引入&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-引入&#34;&gt;#&lt;/a&gt; 1. 引入&lt;/h2&gt;
&lt;p&gt;java 项目引入&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.projectlombok&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;lombok&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;1.18.24&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!-- Spring Boot 项目此部分可以不写 --&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Android 项目引入&lt;/p&gt;
&lt;figure class=&#34;highlight clean&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs clean&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;implementation&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;org.projectlombok:lombok:1.18.24&amp;quot;&lt;/span&gt;&lt;br&gt;annotationProcessor &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;org.projectlombok:lombok:1.18.24&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;2-配置文件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-配置文件&#34;&gt;#&lt;/a&gt; 2. 配置文件&lt;/h2&gt;
&lt;p&gt;lombok 的配置文件名为 lombok.config, 生效的作用域为其所在的目录和其子目录&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs lombok.config&#34;&gt;#指明lombok的根目录为当前配置文件所在目录&lt;br&gt;config.stopBubbling=true&lt;br&gt;# 解决子类对象属性值一致，但其继承的父类对象属性值不一致，在比较的时候会出现比较结果不对的情况&lt;br&gt;lombok.equalsAndHashCode.callSuper=call&lt;br&gt;# 使子类的toString方法包括其继承的父类对象属性值&lt;br&gt;lombok.toString.callSuper = call&lt;br&gt;#生成的set方法返回由null改为this,可以链式调用&lt;br&gt;#lombok.accessors.chain=true&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;3-注解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-注解&#34;&gt;#&lt;/a&gt; 3. 注解&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;注解&lt;/th&gt;
&lt;th style=&#34;text-align:right&#34;&gt;使用位置&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;使用效果&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;注解属性&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;@Data&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;类&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;为类的字段生成 get,set 方法，重写类的 equals,toString 和 hashCode 方法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;@Value&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;字段，类&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;效果相当于 java17 的 record 类&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;@Getter&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;字段，类&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;为类的字段生成 get 方法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;@Setter&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;字段，类&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;为类的字段生成 set 方法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;@EqualsAndHashCode&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;类&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;重写类的 equals 和 hashCode 方法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;@ToString&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;类&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;重写类的 toString 方法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;@AllArgsConstructor&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;类&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;为类全参构造函数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;@NoArgsConstructor&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;类&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;为类生成无参构造函数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;@RequiredArgsConstructor&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;类&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;为类生成有参构造函数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;@Builder&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;类&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;自动生成构造者模式代码&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;@val&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;常量声明&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;根据赋值推断出常量类型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;@var&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;变量声明&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;根据赋值推断出常量类型 (等效 java11 的 var 关键字)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;@With&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;字段，类&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;作用于类、变量，生成 with + 变量名的方法，返回当前对象&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;@CustomLog&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;类&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;自定义日志类，生成 log 对象&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;@NonNull&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;作用于成员变量和参数中，标识不能为空，否则抛出空指针异常&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;@Generated&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;用于标记类、变量、方法是自动生成的，没什么大用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;@Cleanup&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;变量&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;自动关闭资源，针对实现了 java.io.Closeable 接口的对象有效&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;@Synchronized&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;方法&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;作用于方法，可以替换 synchronized 关键字或 lock 锁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;@SneakyThrows&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;方法&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;作用于方法，对异常进行捕捉并抛出&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;@Singular&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;集合字段&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;作用于集合字段，需要配合 @Builder 使用，加入了 @Singular 注解后，lombok 为我们添加了一个为集合添加元素的方法&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;@CommonsLog，@Log，@JBossLog，@Log4j，@Log4j2，@Slf4j，@XSlf4j：日志注解，作用于类&lt;/p&gt;
&lt;h2 id=&#34;4-实验性注解的使用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4-实验性注解的使用&#34;&gt;#&lt;/a&gt; 4. 实验性注解的使用&lt;/h2&gt;
&lt;p&gt;@Accessors：类似于 @Builder 支持链式调用，需要配合 @Setter、@Getter 等注解使用，作用于类、变量&lt;br&gt;
 @Delegate：作用于容器变量，为该变量生成一堆常用的方法，这些方法都是容器中的方法&lt;br&gt;
 @ExtensionMethod：作用于类，向类添加方法，无需创建新的子类&lt;br&gt;
 @FieldDefaults：作用于类，定义变量的访问修饰符以及是否加 final&lt;br&gt;
@FieldNameConstants：作用于类，生成一个包含所有成员变量的内部类或者内部枚举，内部类中每个字段值即为字段名并且值不可变&lt;br&gt;
 @Helper：作用于方法内部类，使内部类中的方法暴露在外面可以被直接调用，不建议使用&lt;br&gt;
 @NonFinal：作用于类、变量，表示变量不加 final&lt;br&gt;
@PackagePrivate：作用于类和变量，相当于访问修饰符的 default，没什么用&lt;br&gt;
 @SuperBuilder：支持对于基类成员变量赋值，算是 @Builder 的升级版&lt;br&gt;
 @Tolerate：实现对冲突的兼容，作用于方法上，没什么大用，可以配合 @Builder 使用&lt;br&gt;
 @UtilityClass：作用于类，将类标记为 final，并且类、内部类中的方法、字段都标记为 static&lt;br&gt;
@WithBy3&lt;br&gt;
 六、基于 v1.18.22 版本的实验性注解&lt;br&gt;
 @StandardException：自定义异常类&lt;/p&gt;
</content>
        <category term="lombok" />
        <category term="java" />
        <updated>2024-02-18T03:28:48.555Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2023/01/09/java/MyBatis%E4%B9%8BTypeHandler%E7%94%A8%E6%B3%95/</id>
        <title>MyBatis之TypeHandler用法</title>
        <link rel="alternate" href="http://example.com/2023/01/09/java/MyBatis%E4%B9%8BTypeHandler%E7%94%A8%E6%B3%95/"/>
        <content type="html">&lt;h2 id=&#34;一-问题点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一-问题点&#34;&gt;#&lt;/a&gt; 一。问题点&lt;/h2&gt;
&lt;h2 id=&#34;在使用postgresql的过程中有用到数组类型与json类型这些类型直接用java的类型去接收是会出现类型转换异常的怎么处理呢这时候就要用到typehandler了&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#在使用postgresql的过程中有用到数组类型与json类型这些类型直接用java的类型去接收是会出现类型转换异常的怎么处理呢这时候就要用到typehandler了&#34;&gt;#&lt;/a&gt; 在使用 PostgreSQL 的过程中有用到数组类型与 json 类型，这些类型直接用 java 的类型去接收是会出现类型转换异常的，&lt;br&gt;
 怎么处理呢，这时候就要用到 TypeHandler 了&lt;/h2&gt;
&lt;h2 id=&#34;二-代码&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二-代码&#34;&gt;#&lt;/a&gt; 二。代码&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;java 数组类型接收 jdbc array&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;package&lt;/span&gt; com.china315net.mybatis.handler;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; lombok.extern.slf4j.Slf4j;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; org.apache.ibatis.type.JdbcType;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; org.apache.ibatis.type.MappedJdbcTypes;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; org.apache.ibatis.type.MappedTypes;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; org.apache.ibatis.type.TypeException;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; org.springframework.stereotype.Component;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; java.sql.Array;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; java.sql.PreparedStatement;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; java.sql.SQLException;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt; * 数组类型处理程序&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Slf4j&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@MappedJdbcTypes(&amp;#123;JdbcType.ARRAY&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@MappedTypes(&amp;#123;String[].class, Short[].class, Integer[].class, Long[].class&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Component&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ArrayTypeHandler&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;org&lt;/span&gt;.apache.ibatis.type.ArrayTypeHandler &amp;#123;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Override&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;setNonNullParameter&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(PreparedStatement ps, &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; i, Object parameter, JdbcType jdbcType)&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;throws&lt;/span&gt; SQLException &amp;#123;&lt;br&gt;        log.debug(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;jdbcType:&amp;#123;&amp;#125;&amp;quot;&lt;/span&gt;, jdbcType);&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (parameter &lt;span class=&#34;hljs-keyword&#34;&gt;instanceof&lt;/span&gt; Array array) &amp;#123;&lt;br&gt;            ps.setArray(i, array);&lt;br&gt;        &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (!parameter.getClass().isArray()) &amp;#123;&lt;br&gt;                &lt;span class=&#34;hljs-keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;TypeException&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;ArrayType Handler requires SQL array or java array parameter and does not support type &amp;quot;&lt;/span&gt; + parameter.getClass());&lt;br&gt;            &amp;#125;&lt;br&gt;            Class&amp;lt;?&amp;gt; componentType = parameter.getClass().getComponentType();&lt;br&gt;            &lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;arrayTypeName&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.resolveTypeName(componentType);&lt;br&gt;            &lt;span class=&#34;hljs-type&#34;&gt;Array&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;array&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; ps.getConnection().createArrayOf(arrayTypeName, (Object[]) parameter);&lt;br&gt;            ps.setArray(i, array);&lt;br&gt;        &amp;#125;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;java List 类型接收 jdbc array&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;package&lt;/span&gt; com.china315net.mybatis.handler;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; lombok.extern.slf4j.Slf4j;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; org.apache.ibatis.type.JdbcType;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; org.apache.ibatis.type.MappedJdbcTypes;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; org.apache.ibatis.type.MappedTypes;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; org.springframework.stereotype.Component;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; java.sql.Array;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; java.sql.CallableStatement;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; java.sql.PreparedStatement;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; java.sql.ResultSet;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; java.sql.SQLException;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; java.util.Arrays;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; java.util.List;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt; * 数组类型处理程序&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Slf4j&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@MappedJdbcTypes(&amp;#123;JdbcType.ARRAY&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@MappedTypes(&amp;#123;List.class&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Component&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ListToArrayTypeHandler&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;org&lt;/span&gt;.apache.ibatis.type.ArrayTypeHandler &amp;#123;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Override&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;setNonNullParameter&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(PreparedStatement ps, &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; i, Object parameter, JdbcType jdbcType)&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;throws&lt;/span&gt; SQLException &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (parameter &lt;span class=&#34;hljs-keyword&#34;&gt;instanceof&lt;/span&gt; List&amp;lt;?&amp;gt; list) &amp;#123;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (!list.isEmpty()) &amp;#123;&lt;br&gt;                &lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;arrayTypeName&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.resolveTypeName(list.get(&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;).getClass());&lt;br&gt;                &lt;span class=&#34;hljs-type&#34;&gt;Array&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;array&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; ps.getConnection().createArrayOf(arrayTypeName, list.toArray(Object[]::&lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt;));&lt;br&gt;                ps.setArray(i, array);&lt;br&gt;            &amp;#125;&lt;br&gt;        &amp;#125;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Override&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; Object &lt;span class=&#34;hljs-title function_&#34;&gt;getNullableResult&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(ResultSet rs, String columnName)&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;throws&lt;/span&gt; SQLException &amp;#123;&lt;br&gt;        log.debug(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;getNullableResult1&amp;quot;&lt;/span&gt;);&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.extractList(rs.getArray(columnName));&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Override&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; Object &lt;span class=&#34;hljs-title function_&#34;&gt;getNullableResult&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(ResultSet rs, &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; columnIndex)&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;throws&lt;/span&gt; SQLException &amp;#123;&lt;br&gt;        log.debug(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;getNullableResult2&amp;quot;&lt;/span&gt;);&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.extractList(rs.getArray(columnIndex));&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Override&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; Object &lt;span class=&#34;hljs-title function_&#34;&gt;getNullableResult&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(CallableStatement cs, &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; columnIndex)&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;throws&lt;/span&gt; SQLException &amp;#123;&lt;br&gt;        log.debug(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;getNullableResult3&amp;quot;&lt;/span&gt;);&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.extractList(cs.getArray(columnIndex));&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; Object &lt;span class=&#34;hljs-title function_&#34;&gt;extractList&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(Array array)&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;throws&lt;/span&gt; SQLException &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; Arrays.stream(((Object[]) extractArray(array))).toList();&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;java 使用 FastJson2 的 JSONObject,JSONArray 类型接收 pgsql 的 json 或 jsonb&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;package&lt;/span&gt; com.china315net.mybatis.handler;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; com.alibaba.fastjson2.JSON;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; com.alibaba.fastjson2.JSONArray;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; com.alibaba.fastjson2.JSONObject;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; org.apache.ibatis.type.BaseTypeHandler;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; org.apache.ibatis.type.JdbcType;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; org.apache.ibatis.type.MappedTypes;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; org.postgresql.util.PGobject;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; org.springframework.stereotype.Component;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; java.sql.CallableStatement;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; java.sql.PreparedStatement;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; java.sql.ResultSet;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; java.sql.SQLException;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt; * json类型处理程序&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@MappedTypes(&amp;#123;JSONObject.class, JSONArray.class&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Component&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;JsonbTypeHandler&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;BaseTypeHandler&lt;/span&gt;&amp;lt;Object&amp;gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Override&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;setNonNullParameter&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(PreparedStatement ps, &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; i, Object parameter, JdbcType jdbcType)&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;throws&lt;/span&gt; SQLException &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;PGobject&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;jsonObject&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;PGobject&lt;/span&gt;();&lt;br&gt;        jsonObject.setType(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;json&amp;quot;&lt;/span&gt;);&lt;br&gt;        jsonObject.setValue(JSON.toJSONString(parameter));&lt;br&gt;        ps.setObject(i, jsonObject);&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Override&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; Object &lt;span class=&#34;hljs-title function_&#34;&gt;getNullableResult&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(ResultSet rs, String columnName)&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;throws&lt;/span&gt; SQLException &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; JSON.parse(rs.getString(columnName));&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Override&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; Object &lt;span class=&#34;hljs-title function_&#34;&gt;getNullableResult&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(ResultSet rs, &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; columnIndex)&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;throws&lt;/span&gt; SQLException &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; JSON.parse(rs.getString(columnIndex));&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Override&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; Object &lt;span class=&#34;hljs-title function_&#34;&gt;getNullableResult&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(CallableStatement cs, &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; columnIndex)&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;throws&lt;/span&gt; SQLException &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; JSON.parse(cs.getString(columnIndex));&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;h2 id=&#34;注意点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#注意点&#34;&gt;#&lt;/a&gt; 注意点:&lt;/h2&gt;
&lt;h3 id=&#34;typehandler接口方法说明&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#typehandler接口方法说明&#34;&gt;#&lt;/a&gt; TypeHandler 接口方法说明&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;setNonNullParameter 方法在写入的数据库操作时会调用&lt;/li&gt;
&lt;li&gt;getNullableResult 方法在查询的数据库操作时会调用&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;类型处理器支持的java与jdbc类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#类型处理器支持的java与jdbc类型&#34;&gt;#&lt;/a&gt; 类型处理器支持的 Java 与 jdbc 类型&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&#34;如果要决定一个类型处理器支持哪些java类型有如下途径优先级从上到下依次增加&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#如果要决定一个类型处理器支持哪些java类型有如下途径优先级从上到下依次增加&#34;&gt;#&lt;/a&gt; 如果要决定一个类型处理器支持哪些&lt;strong&gt; Java&lt;/strong&gt; 类型，有如下途径 (优先级从上到下依次增加)。&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;类型处理器的泛型可以决定类型处理器支持的&lt;strong&gt; JavaType&lt;/strong&gt;；&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;在类型处理器上使用注解 @&lt;strong&gt;MappedTypes&lt;/strong&gt; 来指定，例如 @&lt;strong&gt;MappedTypes({List.class})&lt;/strong&gt;；&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;在配置文件中注册类型处理器时，通过 &amp;lt;&lt;strong&gt;typeHandler&lt;/strong&gt; &amp;gt; 标签的&lt;strong&gt; javaType&lt;/strong&gt; 属性来指定，例如 &lt;code&gt;&amp;lt;typeHandler handler=&amp;quot;com.lee.learn.mybatis.typehandler.ListStringTypeHandler&amp;quot; javaType=&amp;quot;List&amp;quot;/&amp;gt;&lt;/code&gt; 。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;如果要决定一个类型处理器支持哪些jdbc类型有如下途径优先级从上到下依次增加&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#如果要决定一个类型处理器支持哪些jdbc类型有如下途径优先级从上到下依次增加&#34;&gt;#&lt;/a&gt; 如果要决定一个类型处理器支持哪些&lt;strong&gt; Jdbc&lt;/strong&gt; 类型，有如下途径 (优先级从上到下依次增加)。&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;在类型处理器上使用注解 @&lt;strong&gt;MappedJdbcTypes&lt;/strong&gt; 来指定，例如 @&lt;strong&gt;MappedJdbcTypes({JdbcType.VARCHAR, JdbcType.CHAR})&lt;/strong&gt;；&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;在配置文件中注册类型处理器时，通过 &amp;lt;&lt;strong&gt;typeHandler&lt;/strong&gt; &amp;gt; 标签的&lt;strong&gt; jdbcType&lt;/strong&gt; 属性来指定（注意：同时也需要设置了&lt;strong&gt; javaType&lt;/strong&gt;&lt;br&gt;
 属性，否则&lt;strong&gt; jdbcType&lt;/strong&gt; 属性不生效）， 例如 &amp;lt;&lt;strong&gt;typeHandler handler=&amp;quot;&lt;br&gt;
com.lee.learn.mybatis.typehandler.ListStringTypeHandler&amp;quot; javaType=“List” jdbcType=“VARCHAR”/&lt;/strong&gt;&amp;gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;typehandler如何生效&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#typehandler如何生效&#34;&gt;#&lt;/a&gt; TypeHandler 如何生效&lt;/h3&gt;
&lt;p&gt;通常，&lt;strong&gt;TypeHandler&lt;/strong&gt; 的使用场景有两个。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在设置预处理语句（&lt;strong&gt;PreparedStatement&lt;/strong&gt;）中的参数时，完成&lt;strong&gt; Java&lt;/strong&gt; 类型到&lt;strong&gt; Jdbc&lt;/strong&gt; 类型的转换，通常就是&lt;strong&gt; INSERT&lt;/strong&gt; 和&lt;strong&gt; UPDATE&lt;/strong&gt;&lt;br&gt;
 的场景；&lt;/li&gt;
&lt;li&gt;在将查询到的结果记录映射到&lt;strong&gt; Java&lt;/strong&gt; 实体对象时，完成&lt;strong&gt; Jdbc&lt;/strong&gt; 类型到&lt;strong&gt; Java&lt;/strong&gt; 类型的转换，通常就是会使用到 &amp;lt;&lt;strong&gt;resultMap&lt;/strong&gt;&lt;br&gt;
 &amp;gt; 的场景。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在使用场景下，如何让我们自定义的&lt;strong&gt; TypeHandler&lt;/strong&gt; 生效，如下直接给出结论，再做验证。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;显式使用&lt;/strong&gt;。示例中就是显示使用，即在 &amp;lt;&lt;strong&gt;result&lt;/strong&gt; &amp;gt; 标签中和 &lt;code&gt;#&amp;#123;&amp;#125;&lt;/code&gt;  占位符中使用&lt;strong&gt; typeHandler&lt;/strong&gt;&lt;br&gt;
 属性来指定使用的类型处理器，这种方式是最简单粗暴的，就算不在配置文件中注册类型处理器，就算没有为类型处理器配置任何支持的&lt;br&gt;
&lt;strong&gt; Jdbc&lt;/strong&gt; 类型，只要在 &amp;lt;&lt;strong&gt;result&lt;/strong&gt; &amp;gt; 标签中和 &lt;code&gt;#&amp;#123;&amp;#125;&lt;/code&gt;  占位符中使用了&lt;strong&gt; typeHandler&lt;/strong&gt; 属性来指定要使用的类型处理器，那么 **MyBatis&lt;br&gt;
** 就会使用这个类型处理器；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;隐式使用&lt;/strong&gt;。通常，我们是不会关注到&lt;strong&gt; TypeHandler&lt;/strong&gt; 的，然而大部分时候&lt;strong&gt; Java&lt;/strong&gt; 类型到&lt;strong&gt; Jdbc&lt;/strong&gt; 类型的相互转换都能成功完成，是因为&lt;br&gt;
&lt;strong&gt; MyBatis&lt;/strong&gt; 会隐式使用其内置的&lt;strong&gt; TypeHandler&lt;/strong&gt;，而隐式使用哪个内置&lt;strong&gt; TypeHandler&lt;/strong&gt;，是通过 &amp;lt;&lt;strong&gt;result&lt;/strong&gt; &amp;gt; 标签和 &lt;code&gt;#&amp;#123;&amp;#125;&lt;/code&gt;  占位符的&lt;br&gt;
&lt;strong&gt; JavaType&lt;/strong&gt; 和&lt;strong&gt; JdbcType&lt;/strong&gt; 进行推断的。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;显式使用&lt;/strong&gt;没什么好说的，最为简单明了。下面重点说一下&lt;strong&gt;隐式使用&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;首先能够被隐式使用的&lt;strong&gt; TypeHandler&lt;/strong&gt;，都需要完成注册，自定义的&lt;strong&gt; TypeHandler&lt;/strong&gt; 可以在配置文件中通过 &amp;lt;&lt;strong&gt;typeHandler&lt;/strong&gt;&lt;br&gt;
 &amp;gt; 标签注册，而内置的&lt;strong&gt; TypeHandler&lt;/strong&gt; 是在&lt;strong&gt; TypeHandlerRegistry#TypeHandlerRegistry&lt;/strong&gt; 方法完成的注册，这个方法有点长，这里不再展示。&lt;/p&gt;
&lt;p&gt;然后每一个&lt;strong&gt; TypeHandler&lt;/strong&gt; 都有其支持的&lt;strong&gt; Java&lt;/strong&gt; 类型，以及可能支持的&lt;strong&gt; Jdbc&lt;/strong&gt; 类型（也可能没有），&lt;strong&gt;TypeHandler&lt;/strong&gt; 注册到 **MyBatis&lt;br&gt;
** 中后，是按照如下形式存储的。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;Map&amp;lt;JavaType, Map&amp;lt;JdbcType, TypeHandler&amp;gt;&amp;gt;&lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;final&lt;/span&gt; Map&amp;lt;Type, Map&amp;lt;JdbcType, TypeHandler&amp;lt;?&amp;gt;&amp;gt;&amp;gt;typeHandlerMap=&lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ConcurrentHashMap&lt;/span&gt;&amp;lt;&amp;gt;();&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;对隐式使用&lt;strong&gt; TypeHandler&lt;/strong&gt; 做一个小结。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;每一个&lt;strong&gt; TypeHandler&lt;/strong&gt; 都有其支持的&lt;strong&gt; Java&lt;/strong&gt; 类型，以及可能支持的&lt;strong&gt; Jdbc&lt;/strong&gt; 类型（也可能没有），并且在&lt;strong&gt; MyBatis&lt;/strong&gt; 中以 *&lt;br&gt;
&lt;em&gt;Map&amp;lt;JavaType, Map&amp;lt;JdbcType, TypeHandler&amp;gt;&amp;gt;&lt;/em&gt;* 的形式存放；&lt;/li&gt;
&lt;li&gt;如果有多个&lt;strong&gt; TypeHandler&lt;/strong&gt; 的支持的&lt;strong&gt; Java&lt;/strong&gt; 类型和&lt;strong&gt; Jdbc&lt;/strong&gt; 类型都一样，则后注册的&lt;strong&gt; TypeHandler&lt;/strong&gt; 会覆盖先注册的 *&lt;br&gt;
&lt;em&gt;TypeHandler&lt;/em&gt;*；&lt;/li&gt;
&lt;li&gt;如果在&lt;strong&gt; MyBatis&lt;/strong&gt; 的参数占位符 &lt;code&gt;#&amp;#123;&amp;#125;&lt;/code&gt;  或者结果映射标签 &amp;lt;&lt;strong&gt;result&lt;/strong&gt; &amp;gt; 中通过&lt;strong&gt; javaType&lt;/strong&gt; 属性指定了&lt;strong&gt; JavaType&lt;/strong&gt;，则&lt;strong&gt; MyBatis&lt;/strong&gt;&lt;br&gt;
 在推断使用哪种&lt;strong&gt; TypeHandler&lt;/strong&gt; 时依据的&lt;strong&gt; JavaType&lt;/strong&gt; 会使用&lt;strong&gt; javaType&lt;/strong&gt; 属性的值，否则，如果是 &amp;lt;&lt;strong&gt;result&lt;/strong&gt; &amp;gt; 的话则&lt;strong&gt; MyBatis&lt;/strong&gt;&lt;br&gt;
 能根据映射对象推断出&lt;strong&gt; JavaType&lt;/strong&gt;，如果是 &lt;code&gt;#&amp;#123;&amp;#125;&lt;/code&gt;  的话则&lt;strong&gt; JavaType&lt;/strong&gt; 为&lt;strong&gt; Object&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;如果在&lt;strong&gt; MyBatis&lt;/strong&gt; 的参数占位符 &lt;code&gt;#&amp;#123;&amp;#125;&lt;/code&gt;  或者结果映射标签 &amp;lt;&lt;strong&gt;result&lt;/strong&gt; &amp;gt; 中通过&lt;strong&gt; jdbcType&lt;/strong&gt; 属性指定了&lt;strong&gt; JdbcType&lt;/strong&gt;，则&lt;strong&gt; MyBatis&lt;/strong&gt;&lt;br&gt;
 在推断使用哪种&lt;strong&gt; TypeHandler&lt;/strong&gt; 时依据的&lt;strong&gt; JdbcType&lt;/strong&gt; 会使用&lt;strong&gt; jdbcType&lt;/strong&gt; 属性的值，否则依据的&lt;strong&gt; JdbcType&lt;/strong&gt; 会为&lt;strong&gt; null&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;MyBatis&lt;/strong&gt; 在推断使用哪个&lt;strong&gt; TypeHandler&lt;/strong&gt; 时，会先使用&lt;strong&gt; JavaType&lt;/strong&gt; 拿到&lt;strong&gt; JavaType&lt;/strong&gt; 对应的&lt;strong&gt; Map&amp;lt;JdbcType,&lt;br&gt;
TypeHandler&amp;gt;&lt;/strong&gt;，然后使用&lt;strong&gt; JdbcType&lt;/strong&gt; 去匹配&lt;strong&gt; TypeHandler&lt;/strong&gt;，匹配不到则再使用&lt;strong&gt; JdbcType=null&lt;/strong&gt; 去匹配&lt;strong&gt; TypeHandler&lt;/strong&gt;&lt;br&gt;
，如果还匹配不到，则判断&lt;strong&gt; JavaType&lt;/strong&gt; 对应的&lt;strong&gt; TypeHandler&lt;/strong&gt; 是否有多个，如果是多个则返回&lt;strong&gt; null&lt;/strong&gt; 表示匹配失败，如果只有一个则使用这个&lt;br&gt;
&lt;strong&gt; TypeHandler&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;spring 框架可以把 TypeHandler 实例注册到 IOC 容器，在使用时会根据类型去推断出要用哪个类型处理器&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;最后建议自定义的typehandler都要为其指定支持的javatype和jdbctype以及必要时在result标签和占位符中都把javatype和jdbctype属性配置上这样mybatis能够快速无误的帮我们推断出应该使用哪个类型处理器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#最后建议自定义的typehandler都要为其指定支持的javatype和jdbctype以及必要时在result标签和占位符中都把javatype和jdbctype属性配置上这样mybatis能够快速无误的帮我们推断出应该使用哪个类型处理器&#34;&gt;#&lt;/a&gt; 最后建议自定义的&lt;strong&gt; TypeHandler&lt;/strong&gt; 都要为其指定支持的&lt;strong&gt; JavaType&lt;/strong&gt; 和&lt;strong&gt; JdbcType&lt;/strong&gt;，以及必要时在 &amp;lt;&lt;strong&gt;result&lt;/strong&gt; &amp;gt; 标签和 &lt;code&gt;#&amp;#123;&amp;#125;&lt;/code&gt;  占位符中都把&lt;br&gt;
&lt;strong&gt; javaType&lt;/strong&gt; 和&lt;strong&gt; jdbcType&lt;/strong&gt; 属性配置上，这样&lt;strong&gt; MyBatis&lt;/strong&gt; 能够快速无误的帮我们推断出应该使用哪个类型处理器。&lt;/h2&gt;
&lt;h3 id=&#34;小补充&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#小补充&#34;&gt;#&lt;/a&gt; 小补充&lt;/h3&gt;
&lt;p&gt;这里再对为参数占位符 &lt;code&gt;#&amp;#123;&amp;#125;&lt;/code&gt;  推断类型处理器时的一些逻辑进行补充说明，不看也不影响对本篇文章的理解。&lt;/p&gt;
&lt;p&gt;为参数占位符 &lt;code&gt;#&amp;#123;&amp;#125;&lt;/code&gt;  推断类型处理器时，如果没有通过&lt;strong&gt; javaType&lt;/strong&gt; 来指定&lt;strong&gt; Java&lt;/strong&gt; 类型，那么&lt;strong&gt; MyBatis&lt;/strong&gt; 是无法知道&lt;strong&gt; Java&lt;/strong&gt;&lt;br&gt;
 类型是什么的（而 &amp;lt;&lt;strong&gt;result&lt;/strong&gt; &amp;gt; 标签是可以的，这是不同点），此时&lt;strong&gt; MyBatis&lt;/strong&gt; 会默认&lt;strong&gt; Java&lt;/strong&gt; 类型是&lt;strong&gt; Object&lt;/strong&gt;，然后通过&lt;strong&gt; Object&lt;/strong&gt; 这个&lt;br&gt;
&lt;strong&gt; JavaType&lt;/strong&gt; 拿到一个&lt;strong&gt; UnknownTypeHandler&lt;/strong&gt; 内置类型处理器，下面看一下&lt;strong&gt; UnknownTypeHandler&lt;/strong&gt; 的&lt;strong&gt; setNonNullParameter ()&lt;/strong&gt; 方法。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Override&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;setNonNullParameter&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(PreparedStatement ps, &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; i, Object parameter, JdbcType jdbcType)&lt;/span&gt;         &lt;span class=&#34;hljs-keyword&#34;&gt;throws&lt;/span&gt; SQLException &amp;#123;     &lt;span class=&#34;hljs-type&#34;&gt;TypeHandler&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;handler&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; resolveTypeHandler(parameter, jdbcType);     handler.setParameter(ps, i, parameter, jdbcType); &amp;#125;  &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; TypeHandler&amp;lt;?&amp;gt; resolveTypeHandler(Object parameter, JdbcType jdbcType) &amp;#123;     TypeHandler&amp;lt;?&amp;gt; handler;     &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (parameter == &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;) &amp;#123;         handler = OBJECT_TYPE_HANDLER;     &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &amp;#123;         &lt;span class=&#34;hljs-comment&#34;&gt;// 根据需要设置到PreparedStatement中的参数判断出Java类型         // 然后再调用到TypeHandlerRegistry#getTypeHandler拿TypeHandler         handler = typeHandlerRegistrySupplier.get().getTypeHandler(parameter.getClass(), jdbcType);         if (handler == null || handler instanceof UnknownTypeHandler) &amp;#123;             handler = OBJECT_TYPE_HANDLER;         &amp;#125;     &amp;#125;     return handler; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;已知&lt;strong&gt; setNonNullParameter ()&lt;/strong&gt; 方法是会在实际执行&lt;strong&gt; SQL&lt;/strong&gt; 语句前被调用到，此时会完成&lt;strong&gt; PreparedStatement&lt;/strong&gt; 的参数设置，因此这时能够拿到实际设置到&lt;br&gt;
&lt;strong&gt; PreparedStatement&lt;/strong&gt; 中的参数值从而得到参数的&lt;strong&gt; JavaType&lt;/strong&gt;，所以这时会再尝试基于&lt;strong&gt; JavaType&lt;/strong&gt; 和&lt;strong&gt; JdbcType&lt;/strong&gt; 去匹配 *&lt;br&gt;
&lt;em&gt;TypeHandler&lt;/em&gt;*。&lt;/p&gt;
&lt;p&gt;所以本质上就算没有通过&lt;strong&gt; javaType&lt;/strong&gt; 指定&lt;strong&gt; JavaType&lt;/strong&gt;，&amp;lt;&lt;strong&gt;result&lt;/strong&gt; &amp;gt; 标签和 &lt;code&gt;#&amp;#123;&amp;#125;&lt;/code&gt;  参数占位符都是能够拿到&lt;strong&gt; JavaType&lt;/strong&gt;，只不过 &amp;lt;*&lt;br&gt;
&lt;em&gt;result&lt;/em&gt;*&amp;gt; 标签在构建&lt;strong&gt; ResultMapping&lt;/strong&gt; 时就能够拿到&lt;strong&gt; JavaType&lt;/strong&gt;，而 &lt;code&gt;#&amp;#123;&amp;#125;&lt;/code&gt;  参数占位符需要在&lt;strong&gt; SQL&lt;/strong&gt; 语句实际执行前为 *&lt;br&gt;
&lt;em&gt;PreparedStatement&lt;strong&gt; 设置参数时才能够拿到&lt;/strong&gt; JavaType&lt;/em&gt;*。&lt;/p&gt;
&lt;p&gt;那么按照本节的结论，为什么第四节最后的&lt;strong&gt;例子 1&lt;/strong&gt; 中的 &lt;code&gt;#&amp;#123;&amp;#125;&lt;/code&gt;  使用不到&lt;strong&gt; ListStringTypeHandler&lt;/strong&gt; 呢，这是因为在为 *&lt;br&gt;
&lt;em&gt;PreparedStatement&lt;strong&gt; 设置参数时，&lt;strong&gt;studentIntention&lt;/strong&gt; 这个参数的实际类型是&lt;/strong&gt; ArrayList&lt;/em&gt;*，而不是&lt;strong&gt; List&lt;/strong&gt;，但在&lt;strong&gt; MyBatis&lt;/strong&gt; 中，认为&lt;br&gt;
&lt;strong&gt; ListStringTypeHandler&lt;/strong&gt; 是支持&lt;strong&gt; List&lt;/strong&gt; 而不是&lt;strong&gt; ArrayList&lt;/strong&gt; 的。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#总结&#34;&gt;#&lt;/a&gt; 总结&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;TypeHandler&lt;/strong&gt; 能够帮助完成&lt;strong&gt; Java&lt;/strong&gt; 类型到&lt;strong&gt; Jdbc&lt;/strong&gt; 类型的相互转换，对于常规的转换，&lt;strong&gt;MyBatis&lt;/strong&gt; 提供了内置的&lt;strong&gt; TypeHandler&lt;/strong&gt;&lt;br&gt;
，而对于非常规的转换，需要自定义&lt;strong&gt; TypeHandler&lt;/strong&gt;。自定义方式有两种，如下所示。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;实现&lt;strong&gt; TypeHandler&lt;/strong&gt; 接口；&lt;/li&gt;
&lt;li&gt;继承&lt;strong&gt; BaseTypeHandler&lt;/strong&gt; 抽象类。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;更推荐使用继承&lt;strong&gt; BaseTypeHandler&lt;/strong&gt; 抽象类的方式来自定义&lt;strong&gt; TypeHandler&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;自定义的&lt;strong&gt; TypeHandler&lt;/strong&gt; 有如下两种方式被使用。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;显示使用。在 &amp;lt;&lt;strong&gt;result&lt;/strong&gt; &amp;gt; 标签或者 &lt;code&gt;#&amp;#123;&amp;#125;&lt;/code&gt;  中通过&lt;strong&gt; typeHandler&lt;/strong&gt; 属性指定要使用的&lt;strong&gt; TypeHandler&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;隐式使用。通过 &amp;lt;&lt;strong&gt;result&lt;/strong&gt; &amp;gt; 标签或者 &lt;code&gt;#&amp;#123;&amp;#125;&lt;/code&gt;  的&lt;strong&gt; JavaType&lt;/strong&gt; 和&lt;strong&gt; JdbcType&lt;/strong&gt;，由&lt;strong&gt; MyBatis&lt;/strong&gt; 推断出需要使用的&lt;strong&gt; TypeHandler&lt;/strong&gt;。&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="java" />
        <category term="mybatis" />
        <category term="TypeHandler" />
        <updated>2023-01-09T08:16:03.000Z</updated>
    </entry>
</feed>
