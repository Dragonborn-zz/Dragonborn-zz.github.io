<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Gson反序列化时间long值转为Date类型报错</title>
    <link href="/2024/02/18/android/Gson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%97%B6%E9%97%B4long%E5%80%BC%E8%BD%AC%E4%B8%BADate%E7%B1%BB%E5%9E%8B%E6%8A%A5%E9%94%99/"/>
    <url>/2024/02/18/android/Gson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%97%B6%E9%97%B4long%E5%80%BC%E8%BD%AC%E4%B8%BADate%E7%B1%BB%E5%9E%8B%E6%8A%A5%E9%94%99/</url>
    
    <content type="html"><![CDATA[<h2 id="gson反序列化时间long值转为date类型报错即gson无法解析位数太长的时间格式"><a class="markdownIt-Anchor" href="#gson反序列化时间long值转为date类型报错即gson无法解析位数太长的时间格式">#</a> Gson 反序列化时间 long 值转为 Date 类型报错，即 Gson 无法解析位数太长的时间格式</h2><h2 id="报错日志"><a class="markdownIt-Anchor" href="#报错日志">#</a> 报错日志</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs log">com.google.gson.JsonSyntaxException: 2022-10-21 00:00:00<br>at com.google.gson.internal.bind.DateTypeAdapter.deserializeToDate(DateTypeAdapter.java:87)<br>at com.google.gson.internal.bind.DateTypeAdapter.read(DateTypeAdapter.java:75)<br>at com.google.gson.internal.bind.DateTypeAdapter.read(DateTypeAdapter.java:46)<br>at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.read(ReflectiveTypeAdapterFactory.java:131)<br>at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:222)<br>at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.read(ReflectiveTypeAdapterFactory.java:131)<br>at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:222)<br>at retrofit2.converter.gson.GsonResponseBodyConverter.convert(GsonResponseBodyConverter.java:40)<br>at retrofit2.converter.gson.GsonResponseBodyConverter.convert(GsonResponseBodyConverter.java:27)<br>at retrofit2.OkHttpCall.parseResponse(OkHttpCall.java:243)<br>at retrofit2.OkHttpCall$1.onResponse(OkHttpCall.java:153)<br>at okhttp3.RealCall$AsyncCall.execute(RealCall.java:174)<br>at okhttp3.internal.NamedRunnable.run(NamedRunnable.java:32)<br>at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167)<br>at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641)<br>at java.lang.Thread.run(Thread.java:920)<br>Caused by: java.text.ParseException: Failed to parse date [&quot;2022-10-21 00:00:00&quot;]: Invalid time zone indicator &#x27; &#x27;<br>at com.google.gson.internal.bind.util.ISO8601Utils.parse(ISO8601Utils.java:274)<br>at com.google.gson.internal.bind.DateTypeAdapter.deserializeToDate(DateTypeAdapter.java:85)<br>at com.google.gson.internal.bind.DateTypeAdapter.read(DateTypeAdapter.java:75) <br>at com.google.gson.internal.bind.DateTypeAdapter.read(DateTypeAdapter.java:46) <br>at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.read(ReflectiveTypeAdapterFactory.java:131) <br>at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:222) <br>at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.read(ReflectiveTypeAdapterFactory.java:131) <br>at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:222) <br>at retrofit2.converter.gson.GsonResponseBodyConverter.convert(GsonResponseBodyConverter.java:40) <br>at retrofit2.converter.gson.GsonResponseBodyConverter.convert(GsonResponseBodyConverter.java:27) <br>at retrofit2.OkHttpCall.parseResponse(OkHttpCall.java:243) <br>at retrofit2.OkHttpCall$1.onResponse(OkHttpCall.java:153) <br>at okhttp3.RealCall$AsyncCall.execute(RealCall.java:174) <br>at okhttp3.internal.NamedRunnable.run(NamedRunnable.java:32) <br>at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167) <br>at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641) <br>at java.lang.Thread.run(Thread.java:920) <br>Caused by: java.lang.IndexOutOfBoundsException: Invalid time zone indicator &#x27; &#x27;<br>at com.google.gson.internal.bind.util.ISO8601Utils.parse(ISO8601Utils.java:245) <br></code></pre></td></tr></table></figure><p>引发原因，返回格式解析出了问题</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">new</span> Retrofit .<span class="hljs-constructor">Builder()</span>.base<span class="hljs-constructor">Url(Api.BASE_URL)</span>.add<span class="hljs-constructor">ConverterFactory(GsonConverterFactory.<span class="hljs-params">create</span>()</span>).build<span class="hljs-literal">()</span>;<br></code></pre></td></tr></table></figure><p>解决办法<br>把 <code>GsonConverterFactory.create()</code>  改成 <code>GsonConverterFactory.create(new GsonBuilder().setDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;).create())</code></p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>gson</tag>
      
      <tag>bug</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Retrofit2文件上传与下载</title>
    <link href="/2024/02/18/android/Retrofit2%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%8E%E4%B8%8B%E8%BD%BD/"/>
    <url>/2024/02/18/android/Retrofit2%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%8E%E4%B8%8B%E8%BD%BD/</url>
    
    <content type="html"><![CDATA[<h1 id="retrofit2文件上传与下载"><a class="markdownIt-Anchor" href="#retrofit2文件上传与下载">#</a> Retrofit2 文件上传与下载</h1><h3 id="文件上传包括多文件上传"><a class="markdownIt-Anchor" href="#文件上传包括多文件上传">#</a> 文件上传：(包括多文件上传)</h3><h4 id="第一步创建服务返回数据的bean类此处服务器返回的是json字符串"><a class="markdownIt-Anchor" href="#第一步创建服务返回数据的bean类此处服务器返回的是json字符串">#</a> 第一步：创建服务返回数据的 bean 类；(此处服务器返回的是 json 字符串);</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseBean</span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> Code;<br>    <span class="hljs-keyword">private</span> String Msg;<br>    <span class="hljs-keyword">private</span> String Data;<br>    <span class="hljs-comment">//...setget方法</span><br><br>&#125; <br></code></pre></td></tr></table></figure><h4 id="第二步创建用于描述网络请求的接口"><a class="markdownIt-Anchor" href="#第二步创建用于描述网络请求的接口">#</a> 第二步：创建用于描述网络请求的接口</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs dart">public <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Api</span> </span>&#123;<br><span class="hljs-comment"><span class="language-markdown">/**</span></span><br><span class="language-markdown"><span class="hljs-comment"><span class="hljs-bullet">*</span> 上传</span></span><br><span class="language-markdown"><span class="hljs-comment"><span class="hljs-bullet">*</span> Multipart 这个注解代表多表单上传</span></span><br><span class="language-markdown"><span class="hljs-comment"><span class="hljs-bullet">*</span> @param partList 表单信息</span></span><br><span class="language-markdown"><span class="hljs-comment"><span class="hljs-bullet">*</span> @return .</span></span><br><span class="language-markdown"><span class="hljs-comment"><span class="hljs-emphasis">*/</span></span></span><br><span class="hljs-meta">@Multipart</span><br><span class="hljs-meta">@POST</span>(<span class="hljs-string">&quot;服务器地址(就创建retrofit设置的基站地址后面的具体地址)&quot;</span>)<br>Call&lt;BaseBean&gt; upLoading(<span class="hljs-meta">@Part</span> <span class="hljs-built_in">List</span>&lt;MultipartBody.Part&gt; partList);<br><br> &#125; <br></code></pre></td></tr></table></figure><h2 id="第三步创建表单里面存储服务器本接口所需要的数据"><a class="markdownIt-Anchor" href="#第三步创建表单里面存储服务器本接口所需要的数据">#</a> 第三步：创建表单，里面存储服务器本接口所需要的数据；</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp">参数添加<br>MultipartBody.Builder builder = <span class="hljs-keyword">new</span> MultipartBody.<span class="hljs-built_in">Builder</span>()<br>           .<span class="hljs-built_in">setType</span>(MultipartBody.FORM)<br>           <span class="hljs-comment">//在这里添加服务器除了文件之外的其他参数</span><br>           .<span class="hljs-built_in">addFormDataPart</span>(<span class="hljs-string">&quot;参数1&quot;</span>, <span class="hljs-string">&quot;值1&quot;</span>)<br>           .<span class="hljs-built_in">addFormDataPart</span>(<span class="hljs-string">&quot;参数2&quot;</span>, <span class="hljs-string">&quot;值2&quot;</span>); <br></code></pre></td></tr></table></figure><h5 id="创建文件你需要上传到服务器的文件"><a class="markdownIt-Anchor" href="#创建文件你需要上传到服务器的文件">#</a> 创建文件 (你需要上传到服务器的文件)</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">File file = <span class="hljs-keyword">new</span> <span class="hljs-built_in">File</span>(file1Location); <span class="hljs-comment">//file1Location文件的路径 ,我是在手机存储根目录下创建了一个文件夹,里面放着了一张图片; </span><br></code></pre></td></tr></table></figure><h5 id="设置文件的格式"><a class="markdownIt-Anchor" href="#设置文件的格式">#</a> 设置文件的格式</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp">RequestBody imageBody = RequestBody.<span class="hljs-built_in">create</span>(MediaType.<span class="hljs-built_in">parse</span>(<span class="hljs-string">&quot;multipart/form-data&quot;</span>), file);<br><br>   <span class="hljs-comment">//添加文件(uploadfile就是你服务器中需要的文件参数)</span><br><br>   builder.<span class="hljs-built_in">addFormDataPart</span>(<span class="hljs-string">&quot;uploadfile&quot;</span>, file.<span class="hljs-built_in">getName</span>(), imageBody); <br></code></pre></td></tr></table></figure><h5 id="生成接口需要的list"><a class="markdownIt-Anchor" href="#生成接口需要的list">#</a> 生成接口需要的 list</h5><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-built_in">List</span>&lt;MultipartBody.Part&gt; parts = builder.build().parts(); <br></code></pre></td></tr></table></figure><h5 id="创建设置okhttpclient"><a class="markdownIt-Anchor" href="#创建设置okhttpclient">#</a> 创建设置 OkHttpClient</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp">OkHttpClient okHttpClient = <span class="hljs-keyword">new</span> OkHttpClient.<span class="hljs-built_in">Builder</span>()<br>           .<span class="hljs-built_in">connectTimeout</span>(<span class="hljs-number">20</span>, TimeUnit.SECONDS)<br>           .<span class="hljs-built_in">readTimeout</span>(<span class="hljs-number">20</span>, TimeUnit.SECONDS)<br>           .<span class="hljs-built_in">writeTimeout</span>(<span class="hljs-number">20</span>, TimeUnit.SECONDS)<br>           <span class="hljs-comment">//允许失败重试</span><br>           .<span class="hljs-built_in">retryOnConnectionFailure</span>(<span class="hljs-literal">true</span>)<br>           .<span class="hljs-built_in">build</span>(); <br></code></pre></td></tr></table></figure><h5 id="创建retrofit实例对象"><a class="markdownIt-Anchor" href="#创建retrofit实例对象">#</a> 创建 retrofit 实例对象</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp">Retrofit retrofit = <span class="hljs-keyword">new</span> Retrofit.<span class="hljs-built_in">Builder</span>()<br>           <span class="hljs-comment">//设置基站地址(基站地址+描述网络请求的接口上面注释的Post地址,就是要上传文件到服务器的地址,</span><br>           <span class="hljs-comment">// 这只是一种设置地址的方法,还有其他方式,不在赘述)</span><br>           .<span class="hljs-built_in">baseUrl</span>(<span class="hljs-string">&quot;你的基站地址&quot;</span>)<br>           <span class="hljs-comment">//设置委托,使用OKHttp联网,也可以设置其他的;</span><br>           .<span class="hljs-built_in">client</span>(okHttpClient)<br>           <span class="hljs-comment">//设置数据解析器,如果没有这个类需要添加依赖:</span><br>           .<span class="hljs-built_in">addConverterFactory</span>(GsonConverterFactory.<span class="hljs-built_in">create</span>())<br>           <span class="hljs-comment">//设置支持rxJava</span><br>           <span class="hljs-comment">// .addCallAdapterFactory(RxJava2CallAdapterFactory.create())</span><br>           .<span class="hljs-built_in">build</span>(); <br></code></pre></td></tr></table></figure><h5 id="实例化请求接口把表单传递过去"><a class="markdownIt-Anchor" href="#实例化请求接口把表单传递过去">#</a> 实例化请求接口，把表单传递过去；</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"> Call&lt;BaseBean&gt; call = retrofit.create(Api.class).upLoading(parts);<br>    <span class="hljs-comment">//开始请求</span><br>    call.enqueue(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Callback</span>&lt;BaseBean&gt;() &#123;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onResponse</span><span class="hljs-params">(Call&lt;BaseBean&gt; call, Response&lt;BaseBean&gt; response)</span> &#123;<br>            <span class="hljs-comment">//联网有响应或有返回数据</span><br>            System.out.println(response.body().toString());<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onFailure</span><span class="hljs-params">(Call&lt;BaseBean&gt; call, Throwable t)</span> &#123;<br>            <span class="hljs-comment">//连接失败,多数是网络不可用导致的</span><br>            System.out.println(<span class="hljs-string">&quot;网络不可用&quot;</span>);<br>        &#125;<br>    &#125;);<br>&#125; <br></code></pre></td></tr></table></figure><h3 id="这就ok了单个文件上传完毕"><a class="markdownIt-Anchor" href="#这就ok了单个文件上传完毕">#</a> 这就 ok 了，单个文件上传完毕！！！</h3><h2 id="多文件上传以两个文件为例"><a class="markdownIt-Anchor" href="#多文件上传以两个文件为例">#</a> 多文件上传 (以两个文件为例)</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp">对比一个文件,这个只需要在[设置文件的格式] 这一步,多添加一个即可;<br>   RequestBody imageBody = RequestBody.<span class="hljs-built_in">create</span>(MediaType.<span class="hljs-built_in">parse</span>(<span class="hljs-string">&quot;multipart/form-data&quot;</span>), file);<br>   RequestBody imageBody1 = RequestBody.<span class="hljs-built_in">create</span>(MediaType.<span class="hljs-built_in">parse</span>(<span class="hljs-string">&quot;multipart/form-data&quot;</span>), file1);<br>   <span class="hljs-comment">//添加文件(uploadfile就是你服务器中需要的文件参数)</span><br>   builder.<span class="hljs-built_in">addFormDataPart</span>(<span class="hljs-string">&quot;uploadfile&quot;</span>, file.<span class="hljs-built_in">getName</span>(), imageBody);<br>   builder.<span class="hljs-built_in">addFormDataPart</span>(<span class="hljs-string">&quot;uploadfile1&quot;</span>, file1.<span class="hljs-built_in">getName</span>(), imageBody1); <br></code></pre></td></tr></table></figure><h2 id="接下来看文件下载ღ"><a class="markdownIt-Anchor" href="#接下来看文件下载ღ">#</a> 接下来看文件下载ღ</h2><h1 id="文件下载"><a class="markdownIt-Anchor" href="#文件下载">#</a> 文件下载:</h1><h2 id="首先还是要在api接口创建一个方法"><a class="markdownIt-Anchor" href="#首先还是要在api接口创建一个方法">#</a> 首先还是要在 API 接口创建一个方法；</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-comment"><span class="language-markdown">/**</span></span><br><span class="language-markdown"><span class="hljs-comment"><span class="hljs-bullet">*</span> 下载文件</span></span><br><span class="language-markdown"><span class="hljs-comment"><span class="hljs-bullet">*</span> 如果下载大文件的一定要加上  @Streaming  注解</span></span><br><span class="language-markdown"><span class="hljs-comment"><span class="hljs-bullet">*</span></span></span><br><span class="language-markdown"><span class="hljs-comment"><span class="hljs-bullet">*</span> @param fileUrl 文件的路径</span></span><br><span class="language-markdown"><span class="hljs-comment"><span class="hljs-bullet">*</span> @return 请求call</span></span><br><span class="language-markdown"><span class="hljs-comment"><span class="hljs-emphasis">*/</span></span></span><br><span class="hljs-meta">@GET</span><br>Call&lt;ResponseBody&gt; download(<span class="hljs-meta">@Url</span> <span class="hljs-built_in">String</span> fileUrl); <br></code></pre></td></tr></table></figure><h3 id="然后就是创建一个retrofit对象跟上面一样由于每次创建retrofit对象会用到很多重复的代码可以抽取成一个公共方法"><a class="markdownIt-Anchor" href="#然后就是创建一个retrofit对象跟上面一样由于每次创建retrofit对象会用到很多重复的代码可以抽取成一个公共方法">#</a> 然后就是创建一个 retrofit 对象，跟上面一样 (由于每次创建 retrofit 对象会用到很多重复的代码，可以抽取成一个公共方法)</h3><h2 id="实例化请求接口"><a class="markdownIt-Anchor" href="#实例化请求接口">#</a> 实例化请求接口:</h2><p>我在百度上找到一张图片，把他的地址拆分了一下，最后一个斜杠之前的 url 设置为了 baseUrl, 斜杠之后设置在这里；</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">地址拆分:    .baseUrl(<span class="hljs-string">&quot;https://gss3.bdstatic.com/-Po3dSag_xI4khGkpoWK1HF6hhy/baike/w%3D268%3Bg%3D0/sign=e3dc64d05a3d26972ed30f5b6dc0d5c6/&quot;</span>)<br><br> <span class="hljs-comment">//整体地址https://gss3.bdstatic.com/Po3dSag_xI4khGkpoWK1HF6hhy/baike/w%3D268%3Bg%3D0/sign=e3dc64d05a3d26972ed30f5b6dc0d5c6/(在这里拆分了)241f95cad1c8a7868a2713146c09c93d70cf509e.jpg</span><br><br>   Call&lt;ResponseBody&gt; download = retrofit.create(Api.<span class="hljs-keyword">class</span>).download(<span class="hljs-string">&quot;241f95cad1c8a7868a2713146c09c93d70cf509e.jpg&quot;</span>);<br>   download.enqueue(new Callback&lt;ResponseBody&gt;() &#123;<br><br>       <span class="hljs-meta">@Override</span><br>       <span class="hljs-keyword">public</span> void onResponse(Call&lt;ResponseBody&gt; call, Response&lt;ResponseBody&gt; response) &#123;<br>           <span class="hljs-keyword">if</span> (response != <span class="hljs-literal">null</span> &amp;&amp; response.isSuccessful()) &#123;<br>           <span class="hljs-comment">// writeResponseBodyToDisk 是我写的下载保存本地工具类,可以参考一下</span><br>               boolean toDisk = writeResponseBodyToDisk(response.body());<br>               <span class="hljs-keyword">if</span> (toDisk) &#123;<br>                   System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;下载成功请查看&quot;</span>);<br>               &#125; <span class="hljs-keyword">else</span> &#123;<br>                   System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;下载失败,请稍后重试&quot;</span>);<br>               &#125;<br>           &#125; <span class="hljs-keyword">else</span> &#123;<br>               System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;服务器返回错误&quot;</span>);<br>           &#125;<br>       &#125;<br><br>       <span class="hljs-meta">@Override</span><br>       <span class="hljs-keyword">public</span> void onFailure(Call&lt;ResponseBody&gt; call, Throwable t) &#123;<br>           <span class="hljs-comment">//连接失败,多数是网络不可用导致的</span><br>           System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;网络不可用&quot;</span>);<br>       &#125;<br>   &#125;); <br></code></pre></td></tr></table></figure><h2 id="writeresponsebodytodisk下载文件保存到本地工具类"><a class="markdownIt-Anchor" href="#writeresponsebodytodisk下载文件保存到本地工具类">#</a> writeResponseBodyToDisk (下载文件保存到本地工具类)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 下载到本地</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> body 内容</span><br><span class="hljs-comment">* <span class="hljs-doctag">@return</span> 成功或者失败</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">writeResponseBodyToDisk</span><span class="hljs-params">(ResponseBody body)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">//判断文件夹是否存在</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">files</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(SD_HOME_DIR);<span class="hljs-comment">//跟目录一个文件夹</span><br>        <span class="hljs-keyword">if</span> (!files.exists()) &#123;<br>            <span class="hljs-comment">//不存在就创建出来</span><br>            files.mkdirs();<br>        &#125;<br>        <span class="hljs-comment">//创建一个文件</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">futureStudioIconFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(SD_HOME_DIR + <span class="hljs-string">&quot;download.jpg&quot;</span>);<br>        <span class="hljs-comment">//初始化输入流</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-comment">//初始化输出流</span><br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//设置每次读写的字节</span><br>            <span class="hljs-type">byte</span>[] fileReader = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">4096</span>];<br>            <span class="hljs-type">long</span> <span class="hljs-variable">fileSize</span> <span class="hljs-operator">=</span> body.contentLength();<br>            <span class="hljs-type">long</span> <span class="hljs-variable">fileSizeDownloaded</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-comment">//请求返回的字节流</span><br>            inputStream = body.byteStream();<br>            <span class="hljs-comment">//创建输出流</span><br>            outputStream = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(futureStudioIconFile);<br>            <span class="hljs-comment">//进行读取操作</span><br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">read</span> <span class="hljs-operator">=</span> inputStream.read(fileReader);<br>                <span class="hljs-keyword">if</span> (read == -<span class="hljs-number">1</span>) &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                <span class="hljs-comment">//进行写入操作</span><br>                outputStream.write(fileReader, <span class="hljs-number">0</span>, read);<br>                fileSizeDownloaded += read;<br>            &#125;<br><br>            <span class="hljs-comment">//刷新</span><br>            outputStream.flush();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (inputStream != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-comment">//关闭输入流</span><br>                inputStream.close();<br>            &#125;<br>            <span class="hljs-keyword">if</span> (outputStream != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-comment">//关闭输出流</span><br>                outputStream.close();<br>            &#125;<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125; <br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>RxJava</title>
    <link href="/2024/02/18/android/RxJava/"/>
    <url>/2024/02/18/android/RxJava/</url>
    
    <content type="html"><![CDATA[<h4 id="rxroom"><a class="markdownIt-Anchor" href="#rxroom">#</a> RxRoom</h4><ul><li><code>Observable</code>  ：流式数据类型</li><li><code>Flowable</code> ：与 Observable 类似，支持背压</li><li><code>Single</code> ：单发数据类型，只能且必须发射一个数据</li><li><code>Maybe</code> ：单发数据类型，发射零个或一个数据</li><li><code>Completable</code> ：不发射任何数据，只通知流的结束。</li></ul><h4 id="测试内存泄漏"><a class="markdownIt-Anchor" href="#测试内存泄漏">#</a> 测试内存泄漏</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Observable.interval(<span class="hljs-number">1</span>, TimeUnit.SECONDS)  <br>        .subscribeOn(Schedulers.io())  <br>        .observeOn(AndroidSchedulers.mainThread())  <br>        .subscribe(s-&gt; Timber.d(<span class="hljs-string">&quot;内存泄漏测试&quot;</span>))<br></code></pre></td></tr></table></figure><h4 id="解决内存泄漏"><a class="markdownIt-Anchor" href="#解决内存泄漏">#</a> 解决内存泄漏</h4><ul><li><ol><li>使用 CompositeDisposable</li></ol></li></ul><p>在 Activity 中定义 CompositeDisposable</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> CompositeDisposable mCompositeDisposable;<br><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addSubscribe</span><span class="hljs-params">(Disposable disposable)</span> &#123;<br>    <span class="hljs-keyword">if</span> (mCompositeDisposable == <span class="hljs-literal">null</span>) &#123;<br>        mCompositeDisposable = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CompositeDisposable</span>();<br>    &#125;<br>    mCompositeDisposable.add(disposable);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onDestroy</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">super</span>.onDestroy();<br>    <span class="hljs-keyword">if</span> (mCompositeDisposable != <span class="hljs-literal">null</span> &amp;&amp; !mCompositeDisposable.isDisposed()) &#123;<br>        mCompositeDisposable.dispose();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在 ViewModel 中重写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCleared</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">super</span>.onCleared();<br>    <span class="hljs-keyword">if</span> (mCompositeDisposable != <span class="hljs-literal">null</span> &amp;&amp; !mCompositeDisposable.isDisposed()) &#123;<br>        mCompositeDisposable.dispose();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">addSubscribe(observable.subscribeOn(Schedulers.io())<br>                .observeOn(AndroidSchedulers.mainThread())<br>                .subscribe(resultBean -&gt; &#123;<br>                    <span class="hljs-keyword">if</span> (CollectionUtils.isNotEmpty(resultBean.getData())) &#123;<br>                        adapter.addItem(resultBean.getData());<br>                    &#125;<br>                &#125;)<br><br>        );<br></code></pre></td></tr></table></figure><ul><li><ol start="2"><li>使用 AutoDispose<br> 导入依赖</li></ol></li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">implementation</span> &#x27;com.uber.autodispose:autodispose-android-archcomponents:<span class="hljs-number">1</span>.<span class="hljs-number">4</span>.<span class="hljs-number">0</span>&#x27;<br></code></pre></td></tr></table></figure><p>使用</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Observable</span>.</span></span>interval(<span class="hljs-number">1</span>, TimeUnit.SECONDS)<br>                .subscribe<span class="hljs-constructor">On(Schedulers.<span class="hljs-params">io</span>()</span>)<br>                .observe<span class="hljs-constructor">On(AndroidSchedulers.<span class="hljs-params">mainThread</span>()</span>)<br>                .<span class="hljs-keyword">as</span>(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AutoDispose</span>.</span></span>auto<span class="hljs-constructor">Disposable(AndroidLifecycleScopeProvider.<span class="hljs-params">from</span>(<span class="hljs-params">this</span>)</span>))<br>                .subscribe(s-&gt; <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Timber</span>.</span></span>d(<span class="hljs-string">&quot;内存泄漏测试&quot;</span>));<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Mybatis一级缓存和二级缓存原理区别</title>
    <link href="/2024/02/18/java/Mybatis%E4%B8%80%E7%BA%A7%E7%BC%93%E5%AD%98%E5%92%8C%E4%BA%8C%E7%BA%A7%E7%BC%93%E5%AD%98%E5%8E%9F%E7%90%86%E5%8C%BA%E5%88%AB/"/>
    <url>/2024/02/18/java/Mybatis%E4%B8%80%E7%BA%A7%E7%BC%93%E5%AD%98%E5%92%8C%E4%BA%8C%E7%BA%A7%E7%BC%93%E5%AD%98%E5%8E%9F%E7%90%86%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<h4 id="mybatis缓存"><a class="markdownIt-Anchor" href="#mybatis缓存">#</a> Mybatis 缓存</h4><p>缓存就是内存中的数据，常常来自对数据库查询结果的保存，使用缓存可以避免频繁与数据库进行交互，从而提高查询响应速度。</p><p>MyBatis 提供了对缓存的支持，分为一级缓存和二级缓存，如下图所示：</p><p><img src="../_resources/9ca5d2eb6f80e3f84875729ba0a32164_101b6f976e2347f8b.png" alt=""></p><p>我们先大致了解下 MyBatis 一级缓存与 MyBatis 二级缓存：</p><p>一级缓存：SqlSession 级别的缓存，缓存的数据只在 SqlSession 内有效。</p><p>二级缓存：mapper 级别的缓存，同一个 namespace 公用这一个缓存，所以对 SqlSession 是共享的，二级缓存需要我们手动开启。</p><p><strong>下面我们再分别详解两者的原理与区别。</strong></p><h2 id="mybatis一级缓存"><a class="markdownIt-Anchor" href="#mybatis一级缓存">#</a> Mybatis 一级缓存</h2><h3 id="1为什么需要mybatis一级缓存"><a class="markdownIt-Anchor" href="#1为什么需要mybatis一级缓存">#</a> 1. 为什么需要 Mybatis 一级缓存</h3><p>当我们使用 Mybatis 进行数据库的操作时候，会创建一个 SqlSession 来进行一次数据库的会话，会话结束则关闭 SqlSession 对象。</p><p>如果我们很有可能多次查询完全相同的 sql 语句，每一次查询都查询一次数据库，那查询数据库代价是比较大的，这会导致系统的资源浪费。</p><p>为了解决这个问题，Mybatis 对每一次会话都添加了缓存操作，不用相同的 SQL 每次都需要查询数据库，这就是 Mybatis 一级缓存的作用。</p><h3 id="2mybatis一级缓存的实现"><a class="markdownIt-Anchor" href="#2mybatis一级缓存的实现">#</a> 2.Mybatis 一级缓存的实现</h3><p>我们知道对 SqlSession 的操作，mybatis 内部都是通过 Executor 来执行的，Executor 的生命周期和 SqlSession 是一致的。</p><p>Mybatis 在 Executor 中创建了<a href="https://so.csdn.net/so/search?q=%E6%9C%AC%E5%9C%B0%E7%BC%93%E5%AD%98&amp;spm=1001.2101.3001.7020">本地缓存</a> (一级缓存)，如下图所示：</p><p><img src="../_resources/b9156e63163a550b0d99b11eb8ee175b_45514b2203be477a8.png" alt=""></p><p><strong>大致的流程如下：</strong></p><p>第一次查询用户 id 信息，先去缓存中查询是否有，如果没有，从数据库中查询用户信息，得到用户信息后在将用户信息储存到一级缓存中。</p><p>如果 sqlSession 去执行 commit 操作（插入、更新、删除），清空 sqlSession 中的一级缓存，保证缓存中始终保存的是最新的信息，避免脏读。</p><p>第二次查询用户 id 信息，先去缓存中查询，如缓存中有，直接从缓存中获取。</p><p>注意：两次查询须在同一个 sqlsession 中完成，否则将不会走 mybatis 的一级缓存。</p><p>在 mybatis 与 spring 进行整合开发时，事务控制在 service 中进行，重复调用两次 servcie 将不会走一级缓存，因为在第二次调用时 session 方法结束，SqlSession 就关闭了。</p><h3 id="3mybatis一级缓存配置"><a class="markdownIt-Anchor" href="#3mybatis一级缓存配置">#</a> 3.Mybatis 一级缓存配置</h3><p>mybatis 一级缓存的范围有 SESSION 和 STATEMENT 两种，默认是 SESSION。</p><p>如果不想使用一级缓存，可以把一级缓存的范围指定为 STATEMENT，这样每次执行完一个 Mapper 中的语句后都会将一级缓存清除。</p><p>如果需要更改一级缓存的范围，可以在 Mybatis 的配置文件中，在下通过 localCacheScope 指定。</p><p>&lt;setting name=“localCacheScope” value=“STATEMENT”/&gt;</p><h2 id="mybatis二级缓存"><a class="markdownIt-Anchor" href="#mybatis二级缓存">#</a> Mybatis 二级缓存</h2><h3 id="1为什么需要mybatis二级缓存"><a class="markdownIt-Anchor" href="#1为什么需要mybatis二级缓存">#</a> 1. 为什么需要 Mybatis 二级缓存？</h3><p>MyBatis 一级缓存最大的共享范围就是一个 SqlSession 内部，那么如果多个 SqlSession 需要共享缓存，则需要开启二级缓存。</p><h3 id="2mybatis二级缓存的实现"><a class="markdownIt-Anchor" href="#2mybatis二级缓存的实现">#</a> 2.Mybatis 二级缓存的实现</h3><p>开启二级缓存后，会使用 CachingExecutor 装饰 Executor，进入一级缓存的查询流程前，先在 CachingExecutor 进行二级缓存的查询，具体的工作流程如下所示。</p><p><img src="../_resources/eaf3e4a8b2e2a8b63a6cc4d9b53bf2a2_5262a034cd504d428.png" alt=""></p><p>二级缓存开启后，同一个 namespace 下的所有操作语句，都影响着同一个 Cache，即二级缓存被多个 SqlSession 共享，是一个全局的变量。</p><p>当开启缓存后，数据的查询执行的流程就是 二级缓存 -&gt; 一级缓存 -&gt; 数据库。</p><p>MyBatis 是默认关闭二级缓存的，因为对于增删改操作频繁的话，那么二级缓存形同虚设，每次都会被清空缓存。</p><h2 id="mybatis一级缓存与二级缓存的区别"><a class="markdownIt-Anchor" href="#mybatis一级缓存与二级缓存的区别">#</a> Mybatis 一级缓存与二级缓存的区别</h2><p>1）一级缓存 Mybatis 的一级缓存是指 SQLSession，一级缓存的作用域是 SQlSession, Myabits 默认开启一级缓存。</p><p>在同一个 SqlSession 中，执行相同的 SQL 查询时；第一次会去查询数据库，并写在缓存中，第二次会直接从缓存中取。 当执行 SQL 时候两次查询中间发生了增删改的操作，则 SQLSession 的缓存会被清空。</p><p>每次查询会先去缓存中找，如果找不到，再去数据库查询，然后把结果写到缓存中。 Mybatis 的内部缓存使用一个 HashMap，key 为 hashcode+statementId+sql 语句。Value 为查询出来的结果集映射成的 java 对象。 SqlSession 执行 insert、update、delete 等操作 commit 后会清空该 SQLSession 缓存。</p><p>2） Mybatis 二级缓存是默认不开启的，作用于一个 Application，是 Mapper 级别的，多个 SqlSession 使用同一个 Mapper 的 sql 能够使用二级缓存。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>lombok的使用</title>
    <link href="/2024/02/18/java/lombok%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2024/02/18/java/lombok%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="1-引入"><a class="markdownIt-Anchor" href="#1-引入">#</a> 1. 引入</h2><p>java 项目引入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.24<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span> <span class="hljs-comment">&lt;!-- Spring Boot 项目此部分可以不写 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>Android 项目引入</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-keyword">implementation</span> <span class="hljs-string">&quot;org.projectlombok:lombok:1.18.24&quot;</span><br>annotationProcessor <span class="hljs-string">&quot;org.projectlombok:lombok:1.18.24&quot;</span><br></code></pre></td></tr></table></figure><h2 id="2-配置文件"><a class="markdownIt-Anchor" href="#2-配置文件">#</a> 2. 配置文件</h2><p>lombok 的配置文件名为 lombok.config, 生效的作用域为其所在的目录和其子目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs lombok.config">#指明lombok的根目录为当前配置文件所在目录<br>config.stopBubbling=true<br># 解决子类对象属性值一致，但其继承的父类对象属性值不一致，在比较的时候会出现比较结果不对的情况<br>lombok.equalsAndHashCode.callSuper=call<br># 使子类的toString方法包括其继承的父类对象属性值<br>lombok.toString.callSuper = call<br>#生成的set方法返回由null改为this,可以链式调用<br>#lombok.accessors.chain=true<br></code></pre></td></tr></table></figure><h2 id="3-注解"><a class="markdownIt-Anchor" href="#3-注解">#</a> 3. 注解</h2><table><thead><tr><th style="text-align:left">注解</th><th style="text-align:right">使用位置</th><th style="text-align:center">使用效果</th><th style="text-align:center">注解属性</th></tr></thead><tbody><tr><td style="text-align:left">@Data</td><td style="text-align:right">类</td><td style="text-align:center">为类的字段生成 get,set 方法，重写类的 equals,toString 和 hashCode 方法</td></tr><tr><td style="text-align:left">@Value</td><td style="text-align:right">字段，类</td><td style="text-align:center">效果相当于 java17 的 record 类</td></tr><tr><td style="text-align:left">@Getter</td><td style="text-align:right">字段，类</td><td style="text-align:center">为类的字段生成 get 方法</td></tr><tr><td style="text-align:left">@Setter</td><td style="text-align:right">字段，类</td><td style="text-align:center">为类的字段生成 set 方法</td></tr><tr><td style="text-align:left">@EqualsAndHashCode</td><td style="text-align:right">类</td><td style="text-align:center">重写类的 equals 和 hashCode 方法</td></tr><tr><td style="text-align:left">@ToString</td><td style="text-align:right">类</td><td style="text-align:center">重写类的 toString 方法</td></tr><tr><td style="text-align:left">@AllArgsConstructor</td><td style="text-align:right">类</td><td style="text-align:center">为类全参构造函数</td></tr><tr><td style="text-align:left">@NoArgsConstructor</td><td style="text-align:right">类</td><td style="text-align:center">为类生成无参构造函数</td></tr><tr><td style="text-align:left">@RequiredArgsConstructor</td><td style="text-align:right">类</td><td style="text-align:center">为类生成有参构造函数</td></tr><tr><td style="text-align:left">@Builder</td><td style="text-align:right">类</td><td style="text-align:center">自动生成构造者模式代码</td></tr><tr><td style="text-align:left">@val</td><td style="text-align:right">常量声明</td><td style="text-align:center">根据赋值推断出常量类型</td></tr><tr><td style="text-align:left">@var</td><td style="text-align:right">变量声明</td><td style="text-align:center">根据赋值推断出常量类型 (等效 java11 的 var 关键字)</td></tr><tr><td style="text-align:left">@With</td><td style="text-align:right">字段，类</td><td style="text-align:center">作用于类、变量，生成 with + 变量名的方法，返回当前对象</td></tr><tr><td style="text-align:left">@CustomLog</td><td style="text-align:right">类</td><td style="text-align:center">自定义日志类，生成 log 对象</td></tr><tr><td style="text-align:left">@NonNull</td><td style="text-align:right"></td><td style="text-align:center">作用于成员变量和参数中，标识不能为空，否则抛出空指针异常</td></tr><tr><td style="text-align:left">@Generated</td><td style="text-align:right"></td><td style="text-align:center">用于标记类、变量、方法是自动生成的，没什么大用</td></tr><tr><td style="text-align:left">@Cleanup</td><td style="text-align:right">变量</td><td style="text-align:center">自动关闭资源，针对实现了 java.io.Closeable 接口的对象有效</td></tr><tr><td style="text-align:left">@Synchronized</td><td style="text-align:right">方法</td><td style="text-align:center">作用于方法，可以替换 synchronized 关键字或 lock 锁</td></tr><tr><td style="text-align:left">@SneakyThrows</td><td style="text-align:right">方法</td><td style="text-align:center">作用于方法，对异常进行捕捉并抛出</td></tr><tr><td style="text-align:left">@Singular</td><td style="text-align:right">集合字段</td><td style="text-align:center">作用于集合字段，需要配合 @Builder 使用，加入了 @Singular 注解后，lombok 为我们添加了一个为集合添加元素的方法</td></tr></tbody></table><p>@CommonsLog，@Log，@JBossLog，@Log4j，@Log4j2，@Slf4j，@XSlf4j：日志注解，作用于类</p><h2 id="4-实验性注解的使用"><a class="markdownIt-Anchor" href="#4-实验性注解的使用">#</a> 4. 实验性注解的使用</h2><p>@Accessors：类似于 @Builder 支持链式调用，需要配合 @Setter、@Getter 等注解使用，作用于类、变量<br> @Delegate：作用于容器变量，为该变量生成一堆常用的方法，这些方法都是容器中的方法<br> @ExtensionMethod：作用于类，向类添加方法，无需创建新的子类<br> @FieldDefaults：作用于类，定义变量的访问修饰符以及是否加 final<br>@FieldNameConstants：作用于类，生成一个包含所有成员变量的内部类或者内部枚举，内部类中每个字段值即为字段名并且值不可变<br> @Helper：作用于方法内部类，使内部类中的方法暴露在外面可以被直接调用，不建议使用<br> @NonFinal：作用于类、变量，表示变量不加 final<br>@PackagePrivate：作用于类和变量，相当于访问修饰符的 default，没什么用<br> @SuperBuilder：支持对于基类成员变量赋值，算是 @Builder 的升级版<br> @Tolerate：实现对冲突的兼容，作用于方法上，没什么大用，可以配合 @Builder 使用<br> @UtilityClass：作用于类，将类标记为 final，并且类、内部类中的方法、字段都标记为 static<br>@WithBy3<br> 六、基于 v1.18.22 版本的实验性注解<br> @StandardException：自定义异常类</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>lombok</tag>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>springboot项目测试框架spock</title>
    <link href="/2024/02/18/java/springboot%E9%A1%B9%E7%9B%AE%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6spock/"/>
    <url>/2024/02/18/java/springboot%E9%A1%B9%E7%9B%AE%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6spock/</url>
    
    <content type="html"><![CDATA[<h3 id="依赖"><a class="markdownIt-Anchor" href="#依赖">#</a> 依赖</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs pom">&lt;dependency&gt;<br>    &lt;groupId&gt;com.china315net&lt;/groupId&gt;<br>    &lt;artifactId&gt;service-sales-api&lt;/artifactId&gt;<br>    &lt;version&gt;$&#123;project.version&#125;&lt;/version&gt;<br>&lt;/dependency&gt;<br>&lt;dependency&gt;<br>    &lt;groupId&gt;org.spockframework&lt;/groupId&gt;<br>    &lt;artifactId&gt;spock-spring&lt;/artifactId&gt;<br>    &lt;version&gt;2.4-M1-groovy-4.0&lt;/version&gt;<br>    &lt;scope&gt;test&lt;/scope&gt;<br>&lt;/dependency&gt;<br>&lt;dependency&gt;<br>    &lt;groupId&gt;org.spockframework&lt;/groupId&gt;<br>    &lt;artifactId&gt;spock-core&lt;/artifactId&gt;<br>    &lt;version&gt;2.4-M1-groovy-4.0&lt;/version&gt;<br>    &lt;scope&gt;test&lt;/scope&gt;<br>&lt;/dependency&gt;<br>&lt;dependency&gt;<br>    &lt;groupId&gt;org.apache.groovy&lt;/groupId&gt;<br>    &lt;artifactId&gt;groovy&lt;/artifactId&gt;<br>    &lt;version&gt;4.0.15&lt;/version&gt;<br>    &lt;scope&gt;test&lt;/scope&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><h3 id="语法"><a class="markdownIt-Anchor" href="#语法">#</a> 语法</h3><ul><li>given：输入条件（前置参数）。</li><li>when：执行行为（Mock 接口、真实调用）。</li><li>then：输出条件（验证结果）。</li><li>and：衔接上个标签，补充的作用。</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>使用Redission自定义注解实现分布式锁（声明式）</title>
    <link href="/2024/02/18/java/%E4%BD%BF%E7%94%A8Redission%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%EF%BC%88%E5%A3%B0%E6%98%8E%E5%BC%8F%EF%BC%89/"/>
    <url>/2024/02/18/java/%E4%BD%BF%E7%94%A8Redission%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%EF%BC%88%E5%A3%B0%E6%98%8E%E5%BC%8F%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="使用redission自定义注解实现分布式锁声明式"><a class="markdownIt-Anchor" href="#使用redission自定义注解实现分布式锁声明式">#</a> 使用 Redission 自定义注解实现分布式锁（声明式）</h1><p>1. 主要依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.redisson<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>redisson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.12.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>配置 redission</li></ol><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">import cn.com.yeexun.core.utils.StringUtils;<br>import org.redisson.Redisson;<br>import org.redisson.api.RedissonClient;<br>import org.redisson.config.Config;<br>import org.springframework.beans.factory.annotation.Value;<br>import org.springframework.context.annotation.Bean;<br>import org.springframework.context.annotation.Configuration;<br><br>@Configuration<br>public <span class="hljs-keyword">class</span> RedissionConfig &#123;<br>    <br>    @<span class="hljs-constructor">Value(<span class="hljs-string">&quot;$&#123;spring.redis.host&#125;&quot;</span>)</span><br>    <span class="hljs-keyword">private</span> String host;<br>    <br>    @<span class="hljs-constructor">Value(<span class="hljs-string">&quot;$&#123;spring.redis.port&#125;&quot;</span>)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> port;<br>    <br>    @<span class="hljs-constructor">Value(<span class="hljs-string">&quot;$&#123;spring.redis.database&#125;&quot;</span>)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> database;<br>    <br>    @<span class="hljs-constructor">Value(<span class="hljs-string">&quot;$&#123;spring.redis.password&#125;&quot;</span>)</span><br>    <span class="hljs-keyword">private</span> String password;<br><br>    @Bean<br>    public RedissonClient get<span class="hljs-constructor">Redisson()</span> &#123;<br>        Config config = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Config()</span>;<br>        config.use<span class="hljs-constructor">SingleServer()</span>.set<span class="hljs-constructor">Address(<span class="hljs-string">&quot;redis://&quot;</span> + <span class="hljs-params">host</span> + <span class="hljs-string">&quot;:&quot;</span> + <span class="hljs-params">port</span>)</span><br>                .set<span class="hljs-constructor">Database(<span class="hljs-params">database</span>)</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">StringUtils</span>.</span></span>is<span class="hljs-constructor">NotEmpty(<span class="hljs-params">password</span>)</span>) &#123;<br>            config.use<span class="hljs-constructor">SingleServer()</span>.set<span class="hljs-constructor">Address(<span class="hljs-string">&quot;redis://&quot;</span> + <span class="hljs-params">host</span> + <span class="hljs-string">&quot;:&quot;</span> + <span class="hljs-params">port</span>)</span>.set<span class="hljs-constructor">Database(<span class="hljs-params">database</span>)</span><br>                    .set<span class="hljs-constructor">Password(<span class="hljs-params">password</span>)</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            config.use<span class="hljs-constructor">SingleServer()</span>.set<span class="hljs-constructor">Address(<span class="hljs-string">&quot;redis://&quot;</span> + <span class="hljs-params">host</span> + <span class="hljs-string">&quot;:&quot;</span> + <span class="hljs-params">port</span>)</span>.set<span class="hljs-constructor">Database(<span class="hljs-params">database</span>)</span>;<br>        &#125;<br>        <span class="hljs-comment">//设置全局默认看门狗机续期时间,如果在使用时不设置，则使用全局的，如果全局不设置，则使用默认的30000,单位毫秒</span><br>        config.set<span class="hljs-constructor">LockWatchdogTimeout(2000)</span>;<br>        return <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Redisson</span>.</span></span>create(config);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>自定义注解</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.validation.constraints.NotNull;<br><span class="hljs-keyword">import</span> java.lang.annotation.*;<br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><br><span class="hljs-meta">@Target(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Inherited</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> RedissionLock &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 分布式锁的key</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@NotNull</span><br>    String <span class="hljs-title function_">keyPrefix</span><span class="hljs-params">()</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 类型，例如：收藏 评论等</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@NotNull</span><br>    String <span class="hljs-title function_">type</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取锁等待时间（默认两秒，还没获取到锁即放弃）</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">long</span> <span class="hljs-title function_">waitTime</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-number">2</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 过期时长，防止一直占用锁</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">long</span> <span class="hljs-title function_">expire</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-number">10</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 过期时长单位</span><br><span class="hljs-comment">     */</span><br>    TimeUnit <span class="hljs-title function_">timeUnit</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> TimeUnit.SECONDS;<br><br>&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li>sepl 工具类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.core.DefaultParameterNameDiscoverer;<br><span class="hljs-keyword">import</span> org.springframework.expression.EvaluationContext;<br><span class="hljs-keyword">import</span> org.springframework.expression.Expression;<br><span class="hljs-keyword">import</span> org.springframework.expression.ExpressionParser;<br><span class="hljs-keyword">import</span> org.springframework.expression.spel.standard.SpelExpressionParser;<br><span class="hljs-keyword">import</span> org.springframework.expression.spel.support.StandardEvaluationContext;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.util.Optional;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpElUtils</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ExpressionParser</span> <span class="hljs-variable">parser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SpelExpressionParser</span>();<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">DefaultParameterNameDiscoverer</span> <span class="hljs-variable">parameterNameDiscoverer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultParameterNameDiscoverer</span>();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">parseSpEl</span><span class="hljs-params">(Method method, Object[] args, String spEl)</span> &#123;<br>        String[] params = Optional.ofNullable(parameterNameDiscoverer.getParameterNames(method)).orElse(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;&#125;);<span class="hljs-comment">//解析参数名</span><br>        <span class="hljs-type">EvaluationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StandardEvaluationContext</span>();<span class="hljs-comment">//el解析需要的上下文对象</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; params.length; i++) &#123;<br>            context.setVariable(params[i], args[i]);<span class="hljs-comment">//所有参数都作为原材料扔进去</span><br>        &#125;<br>        <span class="hljs-type">Expression</span> <span class="hljs-variable">expression</span> <span class="hljs-operator">=</span> parser.parseExpression(spEl);<br>        <span class="hljs-keyword">return</span> expression.getValue(context, String.class);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="5"><li>aop</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> cn.com.yeexun.common.redis.annotation.RedissionLock;<br><span class="hljs-keyword">import</span> cn.com.yeexun.common.redis.utils.SpElUtils;<br><span class="hljs-keyword">import</span> cn.com.yeexun.core.exception.BizException;<br><span class="hljs-keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Around;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Aspect;<br><span class="hljs-keyword">import</span> org.aspectj.lang.reflect.MethodSignature;<br><span class="hljs-keyword">import</span> org.redisson.api.RLock;<br><span class="hljs-keyword">import</span> org.redisson.api.RedissonClient;<br><span class="hljs-keyword">import</span> org.slf4j.Logger;<br><span class="hljs-keyword">import</span> org.slf4j.LoggerFactory;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-meta">@Aspect</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedissionAspect</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(RedissionAspect.class);<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> RedissonClient redissonClient;<br><br>    <span class="hljs-meta">@Around(&quot;@annotation(redissionLock)&quot;)</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">lock</span><span class="hljs-params">(ProceedingJoinPoint proceedingJoinPoint, RedissionLock redissionLock)</span> &#123;<br><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> ((MethodSignature) proceedingJoinPoint.getSignature()).getMethod();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> SpElUtils.parseSpEl(method, proceedingJoinPoint.getArgs(), redissionLock.keyPrefix());<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">lockKey</span> <span class="hljs-operator">=</span> String.format(<span class="hljs-string">&quot;lock:%s:%s&quot;</span>, key, redissionLock.type());<br>        <span class="hljs-type">RLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> redissonClient.getLock(lockKey);<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">hasLock</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            hasLock = lock.tryLock(redissionLock.waitTime(), redissionLock.expire(), redissionLock.timeUnit());<br>            <span class="hljs-keyword">if</span> (hasLock) &#123;<br>                <span class="hljs-keyword">return</span> proceedingJoinPoint.proceed();<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Throwable throwable) &#123;<br>            logger.error(throwable.getMessage());<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BizException</span>(throwable.getMessage());<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (hasLock) &#123;<br>                lock.unlock();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BizException</span>(<span class="hljs-string">&quot;获取分布式锁失败&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="a-idt0aa-id6_serviceimpl_190a6-serviceimpl使用"><a class="markdownIt-Anchor" href="#a-idt0aa-id6_serviceimpl_190a6-serviceimpl使用">#</a> <a id="t0"></a><a id="6_serviceImpl_190"></a>6. serviceImpl 使用</h2><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs less"> <span class="hljs-variable">@Override</span><br> <span class="hljs-variable">@RedissionLock</span>(keyPrefix = <span class="hljs-string">&quot;#contentId&quot;</span>, type = <span class="hljs-string">&quot;likeOrDowns&quot;</span>)<br> public void <span class="hljs-built_in">likeOrDowns</span>(Long contentId, String type) &#123;<br>    <span class="hljs-comment">//处理逻辑</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>面试总结</title>
    <link href="/2024/02/18/java/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/"/>
    <url>/2024/02/18/java/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h4 id="mybatis一级缓存二级缓存的作用"><a class="markdownIt-Anchor" href="#mybatis一级缓存二级缓存的作用">#</a> mybatis 一级缓存二级缓存的作用</h4><h4 id="redis-缓存雪崩解决"><a class="markdownIt-Anchor" href="#redis-缓存雪崩解决">#</a> redis 缓存雪崩解决</h4><hr><p><em><strong>缓存穿透</strong></em><br>当 Redis 和数据库中都没有我们想要的数据时，就需要考虑缓存穿透的问题了。下面这段逻辑大家用的会比较多：先去 Redis 中查找某资源，Redis 中查不到就去 DB 中查，DB 中查到后回写一份数据到 Redis 中。<br>缓存穿透</p><p>当 Redis 和数据库中都没有我们想要的数据时，就需要考虑缓存穿透的问题了。下面这段逻辑大家用的会比较多：先去 Redis 中查找某资源，Redis 中查不到就去 DB 中查，DB 中查到后回写一份数据到 Redis 中。<br><em><strong>缓存击穿</strong></em><br>试想如果所有请求对着一个 key 照死里搞，这是不是就是一种定点打击呢？</p><p>怎么理解呢？举个极端的例子：比如某某明星爆出一个惊天狠料，海量吃瓜群众同时访问微博去查看该八卦新闻，而微博 Redis 集群中数据在此刻正好过期了，那么无数的请求则直接打到了微博系统的物理 DB 上，DB 瞬间挂了。</p><p>解决方案：</p><p>1、热点数据永远不过期</p><p>比如我们可以将某个 key 的缓存时间设置为 25 小时，然后后台有个 JOB 每隔 24 小时就去批量刷新一下热点数据。就可以解决这个问题了。</p><p>2、使用互斥锁</p><p>容易影响吞吐量，大部分项目设置热点 key 永不过期就妥妥的了。</p><p><em><strong>缓存雪崩</strong></em><br>这里的 Redis 崩了指的并不是 Redis 集群宕机了。而是说在某个时刻 Redis 集群中的热点 key 都失效了。如果集群中的热点 key 在某一时刻同时失效了的话，试想海量的请求都将直接打到 DB 上，DB 可能在瞬间就被打爆了。</p><p>解决方案：<br>1、Redis 失效时间加上随机数<br> Redis 失效时间加上随机数，是一种比较取巧的解决方案。在一定程度上减轻了 DB 的瞬时压力，但是这种方案也在一定程度上增加了维护的成本。</p><p>2、Redis 永不过期</p><h4 id="rabbitmq消息的几种模式"><a class="markdownIt-Anchor" href="#rabbitmq消息的几种模式">#</a> rabbitMQ 消息的几种模式</h4>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>脚本</title>
    <link href="/2024/02/18/win/%E8%84%9A%E6%9C%AC/"/>
    <url>/2024/02/18/win/%E8%84%9A%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<h2 id="获取管理员权限"><a class="markdownIt-Anchor" href="#获取管理员权限">#</a> 获取管理员权限</h2><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sqf">@ <span class="hljs-built_in">echo</span> off<br>%<span class="hljs-number">1</span> %<span class="hljs-number">2</span><br>ver|<span class="hljs-built_in">find</span> <span class="hljs-string">&quot;5.&quot;</span>&gt;nul&amp;&amp;<span class="hljs-built_in">goto</span> :<span class="hljs-built_in">Admin</span><br>mshta vbscript:createobject(<span class="hljs-string">&quot;shell.application&quot;</span>).shellexecute(<span class="hljs-string">&quot;%~s0&quot;</span>,<span class="hljs-string">&quot;goto :Admin&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;runas&quot;</span>,<span class="hljs-number">1</span>)(window.close)&amp;<span class="hljs-built_in">goto</span> :eof<br>:<span class="hljs-built_in">Admin</span><br></code></pre></td></tr></table></figure><h2 id="关闭指定接口"><a class="markdownIt-Anchor" href="#关闭指定接口">#</a> 关闭指定接口</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros">@echo off<br><span class="hljs-built_in">set</span> /p <span class="hljs-attribute">var1</span>=please input port: <br>netstat -nao | findstr <span class="hljs-string">&quot;%var1%&quot;</span><br><span class="hljs-built_in">set</span> /p <span class="hljs-attribute">var2</span>=please input pid: <br>taskkill -pid %var2% -f<br>pause<br></code></pre></td></tr></table></figure><h2 id="设置环境变量"><a class="markdownIt-Anchor" href="#设置环境变量">#</a> 设置环境变量</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">setx <span class="hljs-string">&quot;JAVA_HOME&quot;</span> <span class="hljs-string">&quot;xxx&quot;</span> /m<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>正则表达式</title>
    <link href="/2024/02/18/%E5%B7%A5%E5%85%B7/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <url>/2024/02/18/%E5%B7%A5%E5%85%B7/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h3 id="替换"><a class="markdownIt-Anchor" href="#替换">#</a> 替换</h3><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mtext>全部字符</mtext></mrow><annotation encoding="application/x-tex">0 全部字符</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">0</span><span class="mord cjk_fallback">全部字符</span></span></span></span>n 第 n 个捕获组<br> \U 将匹配项转为大写 (Upper)<br>\L 将匹配项转为小写 (Lower)<br>\E 终止转换 (End)</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Android各版本对应的SDK及JDK版本要求</title>
    <link href="/2024/02/18/android/Android%E5%90%84%E7%89%88%E6%9C%AC%E5%AF%B9%E5%BA%94%E7%9A%84SDK%E5%8F%8AJDK%E7%89%88%E6%9C%AC%E8%A6%81%E6%B1%82/"/>
    <url>/2024/02/18/android/Android%E5%90%84%E7%89%88%E6%9C%AC%E5%AF%B9%E5%BA%94%E7%9A%84SDK%E5%8F%8AJDK%E7%89%88%E6%9C%AC%E8%A6%81%E6%B1%82/</url>
    
    <content type="html"><![CDATA[<table><thead><tr><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td><strong>平台版本</strong></td><td><strong>SDK 版本</strong></td><td><strong>版本名称</strong></td><td><strong>JDK 版本</strong></td></tr><tr><td>Android 13.0</td><td>33</td><td>T</td><td>11</td></tr><tr><td>Android 12.0</td><td>31</td><td>S</td><td>11</td></tr><tr><td>Android 11.0</td><td>30</td><td>R</td><td>8</td></tr><tr><td>Android 10.0</td><td>29</td><td>Q</td><td>8</td></tr><tr><td>Android 9.0</td><td>28</td><td>Pie</td><td>8</td></tr><tr><td>Android 8.1</td><td>27</td><td>Oreo</td><td>8</td></tr><tr><td>Android 8.0</td><td>26</td><td>Oreo</td><td>8</td></tr><tr><td>Android 7.1</td><td>25</td><td>Nougat</td><td>8</td></tr><tr><td>Android 7.0</td><td>24</td><td>Nougat</td><td>8</td></tr><tr><td>Android 6.0</td><td>23</td><td>Marshmallow</td><td>7</td></tr><tr><td>Android 5.1</td><td>22</td><td>Lollipop</td><td>7</td></tr><tr><td>Android 5.0</td><td>21</td><td>Lollipop</td><td>7</td></tr><tr><td>Android 4.4</td><td>19</td><td>KITKAT</td><td>6</td></tr><tr><td>Android 4.3</td><td>18</td><td>JELLY_BEAN_MR2</td><td>6</td></tr><tr><td>Android 4.2, 4.2.2</td><td>17</td><td>JELLY_BEAN_MR1</td><td>6</td></tr><tr><td>Android 4.1, 4.1.1</td><td>16</td><td>JELLY_BEAN</td><td>6</td></tr><tr><td>Android 4.0.3, 4.0.4</td><td>15</td><td>ICE_CREAM_SANDWICH_MR1</td><td>6</td></tr><tr><td>Android 4.0, 4.0.1, 4.0.2</td><td>14</td><td>ICE_CREAM_SANDWICH</td><td>6</td></tr><tr><td>Android 3.2</td><td>13</td><td>HONEYCOMB_MR2</td><td>6</td></tr><tr><td>Android 3.1.x</td><td>12</td><td>HONEYCOMB_MR1</td><td>6</td></tr><tr><td>Android 3.0.x</td><td>11</td><td>HONEYCOMB</td><td>6</td></tr><tr><td>Android 2.3.4</td><td>10</td><td>GINGERBREAD_MR1</td><td>6</td></tr><tr><td>Android 2.3.3</td><td>10</td><td>GINGERBREAD_MR1</td><td>6</td></tr><tr><td>Android 2.3.2</td><td>9</td><td>GINGERBREAD</td><td>6</td></tr><tr><td>Android 2.3.1</td><td>9</td><td>GINGERBREAD</td><td>6</td></tr><tr><td>Android 2.3</td><td>9</td><td>GINGERBREAD</td><td>6</td></tr><tr><td>Android 2.2.x</td><td>8</td><td>FROYO</td><td>6</td></tr><tr><td>Android 2.1.x</td><td>7</td><td>ECLAIR_MR1</td><td>6</td></tr><tr><td>Android 2.0.1</td><td>6</td><td>ECLAIR_0_1</td><td>6</td></tr><tr><td>Android 2.0</td><td>5</td><td>ECLAIR</td><td>6</td></tr><tr><td>Android 1.6</td><td>4</td><td>DONUT</td><td>6</td></tr><tr><td>Android 1.5</td><td>3</td><td>CUPCAKE</td><td>6</td></tr><tr><td>Android 1.1</td><td>2</td><td>BASE_1_1</td><td>6</td></tr><tr><td>Android 1.0</td><td>1</td><td>BASE</td><td>6</td></tr></tbody></table><p>Java 代码混淆工具 ProGuard 对应 jdk 关系</p><p>45 = Java 1.1<br>46 = Java 1.2<br>47 = Java 1.3<br>48 = Java 1.4<br>49 = Java 5<br>50 = Java 6<br>51 = Java 7<br>52 = Java 8<br>53 = Java 9<br>54 = Java 10<br>55 = Java 11<br>56 = Java 12<br>57 = Java 13</p>]]></content>
    
    
    <categories>
      
      <category>杂</category>
      
    </categories>
    
    
    <tags>
      
      <tag>android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vim常用命令</title>
    <link href="/2024/02/06/%E5%B7%A5%E5%85%B7/vim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2024/02/06/%E5%B7%A5%E5%85%B7/vim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="vim-键盘图"><a class="markdownIt-Anchor" href="#vim-键盘图">#</a> vim 键盘图</h2><p><img src="https://www.runoob.com/wp-content/uploads/2015/10/vi-vim-cheat-sheet-sch.gif" alt=""></p><h2 id="vivim-的使用"><a class="markdownIt-Anchor" href="#vivim-的使用">#</a> vi/vim 的使用</h2><p>基本上 vi/vim 共分为三种模式，<strong>命令模式（Command Mode）、输入模式（Insert Mode）和命令行模式（Command-Line Mode）</strong>。</p><h3 id="命令模式"><a class="markdownIt-Anchor" href="#命令模式">#</a> 命令模式</h3><p><strong>用户刚刚启动 vi/vim，便进入了命令模式。</strong></p><p>此状态下敲击键盘动作会被 Vim 识别为命令，而非输入字符，比如我们此时按下 i，并不会输入一个字符，i 被当作了一个命令。</p><p>以下是普通模式常用的几个命令：</p><ul><li>i – 切换到输入模式，在光标当前位置开始输入文本。</li><li>x – 删除当前光标所在处的字符。</li><li>: – 切换到底线命令模式，以在最底一行输入命令。</li><li>a – 进入插入模式，在光标下一个位置开始输入文本。</li><li>o：在当前行的下方插入一个新行，并进入插入模式。</li><li>O – 在当前行的上方插入一个新行，并进入插入模式。</li><li>dd – 删除当前行。</li><li>yy – 复制当前行。</li><li>p – 粘贴剪贴板内容到光标下方。</li><li>P – 粘贴剪贴板内容到光标上方。</li><li>u – 撤销上一次操作。</li><li>Ctrl + r – 重做上一次撤销的操作。</li><li>:w – 保存文件。</li><li>:q – 退出 Vim 编辑器。</li><li>:q! – 强制退出 Vim 编辑器，不保存修改。</li></ul><p>若想要编辑文本，只需要启动 Vim，进入了命令模式，按下 i 切换到输入模式即可。</p><p>命令模式只有一些最基本的命令，因此仍要依靠<strong>底线命令行模式</strong>输入更多命令。</p><h3 id="输入模式"><a class="markdownIt-Anchor" href="#输入模式">#</a> 输入模式</h3><p>在命令模式下按下 i 就进入了输入模式，使用 Esc 键可以返回到普通模式。</p><p>在输入模式中，可以使用以下按键：</p><ul><li><strong>字符按键以及 Shift 组合</strong>，输入字符</li><li><strong>ENTER</strong>，回车键，换行</li><li><strong>BACK SPACE</strong>，退格键，删除光标前一个字符</li><li><strong>DEL</strong>，删除键，删除光标后一个字符</li><li><strong>方向键</strong>，在文本中移动光标</li><li><strong>HOME</strong>/<strong>END</strong>，移动光标到行首 / 行尾</li><li><strong>Page Up</strong>/<strong>Page Down</strong>，上 / 下翻页</li><li><strong>Insert</strong>，切换光标为输入 / 替换模式，光标将变成竖线 / 下划线</li><li><strong>ESC</strong>，退出输入模式，切换到命令模式</li></ul><h3 id="底线命令模式"><a class="markdownIt-Anchor" href="#底线命令模式">#</a> 底线命令模式</h3><p>在命令模式下按下 :（英文冒号）就进入了底线命令模式。</p><p>底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。</p><p>在底线命令模式中，基本的命令有（已经省略了冒号）：</p><ul><li><code>:w</code> ：保存文件。</li><li><code>:q</code> ：退出 Vim 编辑器。</li><li><code>:wq</code> ：保存文件并退出 Vim 编辑器。</li><li><code>:q!</code> ：强制退出 Vim 编辑器，不保存修改。</li></ul><p>按 ESC 键可随时退出底线命令模式。</p><p>简单的说，我们可以将这三个模式想成底下的图标来表示：</p><p><img src="../_resources/vim-vi-workmodel_52de27b995914cba974754e535802695.png" alt=""></p><hr><h3 id="第一部分一般模式可用的光标移动-复制粘贴-搜索替换等"><a class="markdownIt-Anchor" href="#第一部分一般模式可用的光标移动-复制粘贴-搜索替换等">#</a> 第一部分：一般模式可用的光标移动、复制粘贴、搜索替换等</h3><table><thead><tr><th style="text-align:left">移动光标的方法</th><th style="text-align:left"></th></tr></thead><tbody><tr><td style="text-align:left">h 或 向左箭头键 (←)</td><td style="text-align:left">光标向左移动一个字符</td></tr><tr><td style="text-align:left">j 或 向下箭头键 (↓)</td><td style="text-align:left">光标向下移动一个字符</td></tr><tr><td style="text-align:left">k 或 向上箭头键 (↑)</td><td style="text-align:left">光标向上移动一个字符</td></tr><tr><td style="text-align:left">l 或 向右箭头键 (→)</td><td style="text-align:left">光标向右移动一个字符</td></tr><tr><td style="text-align:left">[Ctrl] + [f]</td><td style="text-align:left">屏幕『向下』移动一页，相当于 [Page Down] 按键 (常用)</td></tr><tr><td style="text-align:left">[Ctrl] + [b]</td><td style="text-align:left">屏幕『向上』移动一页，相当于 [Page Up] 按键 (常用)</td></tr><tr><td style="text-align:left">[Ctrl] + [d]</td><td style="text-align:left">屏幕『向下』移动半页</td></tr><tr><td style="text-align:left">[Ctrl] + [u]</td><td style="text-align:left">屏幕『向上』移动半页</td></tr><tr><td style="text-align:left">+</td><td style="text-align:left">光标移动到非空格符的下一行</td></tr><tr><td style="text-align:left">-</td><td style="text-align:left">光标移动到非空格符的上一行</td></tr><tr><td style="text-align:left">n&lt;space&gt;</td><td style="text-align:left">那个 n 表示『数字』，例如 20 。按下数字后再按空格键，光标会向右移动这一行的 n 个字符。例如 20&lt;space&gt; 则光标会向后面移动 20 个字符距离。</td></tr><tr><td style="text-align:left">0 或功能键 [Home]</td><td style="text-align:left">这是数字『 0 』：移动到这一行的最前面字符处 (常用)</td></tr><tr><td style="text-align:left">$ 或功能键 [End]</td><td style="text-align:left">移动到这一行的最后面字符处 (常用)</td></tr><tr><td style="text-align:left">H</td><td style="text-align:left">光标移动到这个屏幕的最上方那一行的第一个字符</td></tr><tr><td style="text-align:left">M</td><td style="text-align:left">光标移动到这个屏幕的中央那一行的第一个字符</td></tr><tr><td style="text-align:left">L</td><td style="text-align:left">光标移动到这个屏幕的最下方那一行的第一个字符</td></tr><tr><td style="text-align:left">G</td><td style="text-align:left">移动到这个档案的最后一行 (常用)</td></tr><tr><td style="text-align:left">nG</td><td style="text-align:left">n 为数字。移动到这个档案的第 n 行。例如 20G 则会移动到这个档案的第 20 行 (可配合 :set nu)</td></tr><tr><td style="text-align:left">gg</td><td style="text-align:left">移动到这个档案的第一行，相当于 1G 啊！ (常用)</td></tr><tr><td style="text-align:left">n&lt;Enter&gt;</td><td style="text-align:left">n 为数字。光标向下移动 n 行 (常用)</td></tr></tbody></table><p>** 搜索替换 **<br>| /word | 向光标之下寻找一个名称为 word 的字符串。例如要在档案内搜寻 vbird 这个字符串，就输入 /vbird 即可！ (常用) |<br>| ?word | 向光标之上寻找一个字符串名称为 word 的字符串。 |<br>| n | 这个 n 是英文按键。代表重复前一个搜寻的动作。举例来说， 如果刚刚我们执行 /vbird 去向下搜寻 vbird 这个字符串，则按下 n 后，会向下继续搜寻下一个名称为 vbird 的字符串。如果是执行？vbird 的话，那么按下 n 则会向上继续搜寻名称为 vbird 的字符串！ |<br>| N | 这个 N 是英文按键。与 n 刚好相反，为『反向』进行前一个搜寻动作。 例如 /vbird 后，按下 N 则表示『向上』搜寻 vbird 。 |<br>| 使用 /word 配合 n 及 N 是非常有帮助的！可以让你重复的找到一些你搜寻的关键词！ | |<br>| :n1,n2s/word1/word2/g | n1 与 n2 为数字。在第 n1 与 n2 行之间寻找 word1 这个字符串，并将该字符串取代为 word2 ！举例来说，在 100 到 200 行之间搜寻 vbird 并取代为 VBIRD 则：<br>『:100,200s/vbird/VBIRD/g』。(常用) |<br>| :1,<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mi mathvariant="normal">/</mi><mi>w</mi><mi>o</mi><mi>r</mi><mi>d</mi><mn>1</mn><mi mathvariant="normal">/</mi><mi>w</mi><mi>o</mi><mi>r</mi><mi>d</mi><mn>2</mn><mi mathvariant="normal">/</mi><mi>g</mi><mtext>或</mtext><mo>:</mo></mrow><annotation encoding="application/x-tex">s/word1/word2/g 或 :%s/word1/word2/g | 从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！(常用) | | :1,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">s</span><span class="mord">/</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mord mathnormal" style="margin-right:0.02778em;">or</span><span class="mord mathnormal">d</span><span class="mord">1/</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mord mathnormal" style="margin-right:0.02778em;">or</span><span class="mord mathnormal">d</span><span class="mord">2/</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord cjk_fallback">或</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span></span></span></span>s/word1/word2/gc 或 :% s/word1/word2/gc | 从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！且在取代前显示提示字符给用户确认 (confirm) 是否需要取代！(常用) |<br>| 删除、复制与贴上 | |<br>| x, X | 在一行字当中，x 为向后删除一个字符 (相当于 [del] 按键)， X 为向前删除一个字符 (相当于 [backspace] 亦即是退格键) (常用) |<br>| nx | n 为数字，连续向后删除 n 个字符。举例来说，我要连续删除 10 个字符， 『10x』。 |<br>| dd | 剪切游标所在的那一整行 (常用)，用 p/P 可以粘贴。 |<br>| ndd | n 为数字。剪切光标所在的向下 n 行，例如 20dd 则是剪切 20 行 (常用)，用 p/P 可以粘贴。 |<br>| d1G | 删除光标所在到第一行的所有数据 |<br>| dG | 删除光标所在到最后一行的所有数据 |<br>| d$ | 删除游标所在处，到该行的最后一个字符 |<br>| d0 | 那个是数字的 0 ，删除游标所在处，到该行的最前面一个字符 |<br>| yy | 复制游标所在的那一行 (常用) |<br>| nyy | n 为数字。复制光标所在的向下 n 行，例如 20yy 则是复制 20 行 (常用) |<br>| y1G | 复制游标所在行到第一行的所有数据 |<br>| yG | 复制游标所在行到最后一行的所有数据 |<br>| y0 | 复制光标所在的那个字符到该行行首的所有数据 |<br>| y$ | 复制光标所在的那个字符到该行行尾的所有数据 |<br>| p, P | p 为将已复制的数据在光标下一行贴上，P 则为贴在游标上一行！ 举例来说，我目前光标在第 20 行，且已经复制了 10 行数据。则按下 p 后， 那 10 行数据会贴在原本的 20 行之后，亦即由 21 行开始贴。但如果是按下 P 呢？ 那么原本的第 20 行会被推到变成 30 行。 (常用) |<br>| J | 将光标所在行与下一行的数据结合成同一行 |<br>| c | 重复删除多个数据，例如向下删除 10 行，[10cj] |<br>| u | 复原前一个动作。(常用) |<br>| [Ctrl]+r | 重做上一个动作。(常用) |<br>| . | 不要怀疑！这就是小数点！意思是重复前一个动作的意思。 如果你想要重复删除、重复贴上等等动作，按下小数点『.』就好了！ (常用) |<br>| 如果你将右手放在键盘上的话，你会发现 hjkl 是排列在一起的，因此可以使用这四个按钮来移动光标。 如果想要进行多次移动的话，例如向下移动 30 行，可以使用 “30j” 或 “30↓” 的组合按键， 亦即加上想要进行的次数 (数字) 后，按下动作即可！ | |</p><h3 id="第二部分一般模式切换到编辑模式的可用的按钮说明"><a class="markdownIt-Anchor" href="#第二部分一般模式切换到编辑模式的可用的按钮说明">#</a> 第二部分：一般模式切换到编辑模式的可用的按钮说明</h3><table><thead><tr><th>进入输入或取代的编辑模式</th><th></th></tr></thead><tbody><tr><td>i, I</td><td>进入输入模式 (Insert mode)：</td></tr><tr><td>i 为『从目前光标所在处输入』， I 为『在目前所在行的第一个非空格符处开始输入』。 (常用)</td></tr><tr><td>a, A</td><td>进入输入模式 (Insert mode)：</td></tr><tr><td>a 为『从目前光标所在的下一个字符处开始输入』， A 为『从光标所在行的最后一个字符处开始输入』。(常用)</td></tr><tr><td>o, O</td><td>进入输入模式 (Insert mode)：</td></tr><tr><td>这是英文字母 o 的大小写。o 为在目前光标所在的下一行处输入新的一行； O 为在目前光标所在的上一行处输入新的一行！(常用)</td></tr><tr><td>r, R</td><td>进入取代模式 (Replace mode)：</td></tr><tr><td>r 只会取代光标所在的那一个字符一次；R 会一直取代光标所在的文字，直到按下 ESC 为止；(常用)</td></tr><tr><td>上面这些按键中，在 vi 画面的左下角处会出现『–INSERT–』或『–REPLACE–』的字样。 由名称就知道该动作了吧！！特别注意的是，我们上面也提过了，你想要在档案里面输入字符时， 一定要在左下角处看到 INSERT 或 REPLACE 才能输入喔！</td><td></td></tr><tr><td>[Esc]</td><td>退出编辑模式，回到一般模式中 (常用)</td></tr></tbody></table><h3 id="第三部分一般模式切换到指令行模式的可用的按钮说明"><a class="markdownIt-Anchor" href="#第三部分一般模式切换到指令行模式的可用的按钮说明">#</a> 第三部分：一般模式切换到指令行模式的可用的按钮说明</h3><table><thead><tr><th>指令行的储存、离开等指令</th><th></th></tr></thead><tbody><tr><td>:w</td><td>将编辑的数据写入硬盘档案中 (常用)</td></tr><tr><td>:w!</td><td>若文件属性为『只读』时，强制写入该档案。不过，到底能不能写入， 还是跟你对该档案的档案权限有关啊！</td></tr><tr><td>:q</td><td>离开 vi (常用)</td></tr><tr><td>:q!</td><td>若曾修改过档案，又不想储存，使用！为强制离开不储存档案。</td></tr><tr><td>注意一下啊，那个惊叹号 (!) 在 vi 当中，常常具有『强制』的意思～</td><td></td></tr><tr><td>:wq</td><td>储存后离开，若为 :wq! 则为强制储存后离开 (常用)</td></tr><tr><td>ZZ</td><td>这是大写的 Z 喔！如果修改过，保存当前文件，然后退出！效果等同于 (保存并退出)</td></tr><tr><td>ZQ</td><td>不保存，强制退出。效果等同于 :q!。</td></tr><tr><td>:w [filename]</td><td>将编辑的数据储存成另一个档案（类似另存新档）</td></tr><tr><td>:r [filename]</td><td>在编辑的数据中，读入另一个档案的数据。亦即将 『filename』 这个档案内容加到游标所在行后面</td></tr><tr><td>:n1,n2 w [filename]</td><td>将 n1 到 n2 的内容储存成 filename 这个档案。</td></tr><tr><td>:! command</td><td>暂时离开 vi 到指令行模式下执行 command 的显示结果！例如</td></tr><tr><td>『:! ls /home』即可在 vi 当中察看 /home 底下以 ls 输出的档案信息！</td></tr><tr><td>vim 环境的变更</td><td></td></tr><tr><td>:set nu</td><td>显示行号，设定之后，会在每一行的前缀显示该行的行号</td></tr><tr><td>:set nonu</td><td>与 set nu 相反，为取消行号！</td></tr></tbody></table><p>特别注意，在 vi/vim 中，数字是很有意义的！数字通常代表重复做几次的意思！ 也有可能是代表去到第几个什么什么的意思。</p><p>举例来说，要删除 50 行，则是用 『50dd』 对吧！ 数字加在动作之前，如我要向下移动 20 行呢？那就是『20j』或者是『20↓』即可。</p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>对PageHelper使用的封装</title>
    <link href="/2024/02/06/java/%E5%AF%B9PageHelper%E4%BD%BF%E7%94%A8%E7%9A%84%E5%B0%81%E8%A3%85/"/>
    <url>/2024/02/06/java/%E5%AF%B9PageHelper%E4%BD%BF%E7%94%A8%E7%9A%84%E5%B0%81%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h2 id="1-问题点"><a class="markdownIt-Anchor" href="#1-问题点">#</a> 1. 问题点</h2><p>在使用 PageHelper 的过程中，产生了两个问题</p><ul><li><ol><li>一个分页接口点击下一页时，绝大多数的情况下数据总数是不变的，但却需要每次请求去查询统计数据总数，产生了性能浪费.</li></ol></li><li><ol start="2"><li>实际使用中要实现分页要写两步，先在要执行分页的代码前标注 <code>PageHelper.startPage(vo);</code> , 再在返回数据时使用 <code>PageInfo.of(list)</code>  生成分页对象，步骤略微麻烦.</li></ol></li></ul><h2 id="2-代码"><a class="markdownIt-Anchor" href="#2-代码">#</a> 2. 代码</h2><p>分页参数基础类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.china315net.common.vo;<br><br><span class="hljs-keyword">import</span> io.swagger.annotations.ApiModelProperty;<br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> com.china315net.common.constant.ConstantPool.MAX_PAGE_SIZE;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 基本分页对象</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BasePageVO</span> &#123;<br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;当前页&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Integer</span> <span class="hljs-variable">pageNum</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;当页显示条数&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Integer</span> <span class="hljs-variable">pageSize</span> <span class="hljs-operator">=</span>  <span class="hljs-number">10</span>;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;总页数&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Integer</span> <span class="hljs-variable">totalRow</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPageSize</span><span class="hljs-params">(Integer pageSize)</span> &#123;<br>        <span class="hljs-keyword">if</span> (pageSize &gt; MAX_PAGE_SIZE) &#123;<br>            <span class="hljs-built_in">this</span>.pageSize = MAX_PAGE_SIZE;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-built_in">this</span>.pageSize = pageSize;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>分页工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.china315net.mybatis.util;<br><br><span class="hljs-keyword">import</span> com.china315net.common.vo.BasePageVO;<br><span class="hljs-keyword">import</span> com.github.pagehelper.ISelect;<br><span class="hljs-keyword">import</span> com.github.pagehelper.PageHelper;<br><span class="hljs-keyword">import</span> com.github.pagehelper.PageInfo;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.function.Function;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PageUtil</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T, P <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BasePageVO</span>&gt; PageInfo&lt;T&gt; <span class="hljs-title function_">doPage</span><span class="hljs-params">(P param, Function&lt;P,List&lt;T&gt;&gt; function)</span> &#123;<br>        <span class="hljs-type">ISelect</span> <span class="hljs-variable">select</span> <span class="hljs-operator">=</span> () -&gt; function.apply(param);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">total</span> <span class="hljs-operator">=</span> param.getTotalRow();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">pageNum</span> <span class="hljs-operator">=</span> param.getPageNum();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">pageSize</span> <span class="hljs-operator">=</span> param.getPageSize();<br>        PageInfo&lt;T&gt; pageInfo;<br>        <span class="hljs-comment">//最后一页强制触发分页条件</span><br>        <span class="hljs-keyword">if</span> (pageNum*pageSize &gt;= total) &#123;<br>            pageInfo = PageHelper.startPage(param).doSelectPageInfo(select);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            pageInfo = PageHelper.startPage(param).setCount(<span class="hljs-literal">false</span>).doSelectPageInfo(select);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">nowTotal</span> <span class="hljs-operator">=</span> (pageNum-<span class="hljs-number">1</span>)*pageSize + pageInfo.getSize();<br>            <span class="hljs-comment">//当前页未满且不是最后一页,设置数据总数为当前数据总数</span><br>            <span class="hljs-keyword">if</span> (pageNum*pageSize &gt; nowTotal) &#123;<br>                total = nowTotal;<br>            &#125;<br>            pageInfo.setTotal(total);<br>        &#125;<br>        <span class="hljs-keyword">return</span> pageInfo;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-使用"><a class="markdownIt-Anchor" href="#3-使用">#</a> 3. 使用</h2><p>使用的示例代码如下</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@ApiOperation</span>(value = <span class="hljs-string">&quot;列表查询&quot;</span>)<br><span class="hljs-variable">@GetMapping</span>(<span class="hljs-string">&quot;/list&quot;</span>)<br>public ResultBean&lt;PageInfo&lt;BlendingFormulaVO&gt;&gt; <span class="hljs-built_in">list</span>(BlendingFormulaSearchVO search) &#123;<br>    <span class="hljs-selector-tag">return</span> <span class="hljs-selector-tag">ResultBean</span><span class="hljs-selector-class">.success</span>(PageUtil.<span class="hljs-built_in">doPage</span>(search, <span class="hljs-attribute">blendingFormulaService</span>::listPage));<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-工具类效果"><a class="markdownIt-Anchor" href="#4-工具类效果">#</a> 4. 工具类效果</h2><ul><li><ol><li>当前页为最后一页强制触发查询数据总数</li></ol></li><li><ol start="2"><li>当前页未满时说明数据库数据总数为当前分页计算出的数据总数，设置数据总数为当前当前分页计算出数据总数</li></ol></li><li><ol start="3"><li>不满足上面两条且前端传了分页总数的情况，不会去查询数据总数</li></ol></li></ul>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PageHelper</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git暂存命令</title>
    <link href="/2024/02/06/%E5%B7%A5%E5%85%B7/git%E6%9A%82%E5%AD%98%E5%91%BD%E4%BB%A4/"/>
    <url>/2024/02/06/%E5%B7%A5%E5%85%B7/git%E6%9A%82%E5%AD%98%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h4 id="暂存命令的作用"><a class="markdownIt-Anchor" href="#暂存命令的作用">#</a> 暂存命令的作用</h4><p>可以将 git 工作区的代码更改暂存，之后就可以执行 git pull、git merge 之类的命令</p><h4 id="暂存命令"><a class="markdownIt-Anchor" href="#暂存命令">#</a> 暂存命令</h4><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">git stash <span class="hljs-built_in">save</span> <span class="hljs-string">&quot;暂存的备注&quot;</span><br></code></pre></td></tr></table></figure><p>直接执行 git stash 也可以达到暂存的目的，但是连续多次暂存后容易让人混淆哪次暂存了哪些代码</p><h4 id="查看暂存记录"><a class="markdownIt-Anchor" href="#查看暂存记录">#</a> 查看暂存记录</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git stash list</span><br></code></pre></td></tr></table></figure><h4 id="取回暂存代码"><a class="markdownIt-Anchor" href="#取回暂存代码">#</a> 取回暂存代码</h4><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">git stash <span class="hljs-built_in">pop</span><br></code></pre></td></tr></table></figure><p><strong>取消【取消暂存代码】</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">git <span class="hljs-keyword">reset</span> <span class="hljs-comment">--hard</span><br></code></pre></td></tr></table></figure><h2 id="撤回提交"><a class="markdownIt-Anchor" href="#撤回提交">#</a> 撤回提交</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">git <span class="hljs-keyword">reset</span> <span class="hljs-comment">--soft HEAD</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>maven项目解决lombok与manifold兼容问题</title>
    <link href="/2023/04/30/maven%E9%A1%B9%E7%9B%AE%E8%A7%A3%E5%86%B3lombok%E4%B8%8Emanifold%E5%85%BC%E5%AE%B9%E9%97%AE%E9%A2%98/"/>
    <url>/2023/04/30/maven%E9%A1%B9%E7%9B%AE%E8%A7%A3%E5%86%B3lombok%E4%B8%8Emanifold%E5%85%BC%E5%AE%B9%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.8.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>17<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>17<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">encoding</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">compilerArgs</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- Configure manifold plugin--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">arg</span>&gt;</span>-Xplugin:Manifold<span class="hljs-tag">&lt;/<span class="hljs-name">arg</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">compilerArgs</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- Add the processor path for the plugin --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">annotationProcessorPaths</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">path</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>systems.manifold<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>manifold-ext<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2023.1.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">path</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.24<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">path</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok-mapstruct-binding<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.2.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">annotationProcessorPaths</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>环境部署</category>
      
    </categories>
    
    
    <tags>
      
      <tag>maven</tag>
      
      <tag>lombok</tag>
      
      <tag>manifold</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker部署gitlab私服</title>
    <link href="/2023/04/30/docker%E9%83%A8%E7%BD%B2gitlab%E7%A7%81%E6%9C%8D/"/>
    <url>/2023/04/30/docker%E9%83%A8%E7%BD%B2gitlab%E7%A7%81%E6%9C%8D/</url>
    
    <content type="html"><![CDATA[<h4 id="前置条件"><a class="markdownIt-Anchor" href="#前置条件">#</a> 前置条件</h4><p>安装 docker, 配置国内镜像源</p><h4 id="部署命令使用了一个汉化的版本"><a class="markdownIt-Anchor" href="#部署命令使用了一个汉化的版本">#</a> 部署命令（使用了一个汉化的版本）</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker run -d -p <span class="hljs-number">443</span>:<span class="hljs-number">443</span> -p <span class="hljs-number">80</span>:<span class="hljs-number">80</span> -p <span class="hljs-number">222</span>:<span class="hljs-number">22</span> --name gitlab --restart always -v <span class="hljs-regexp">/home/gi</span>tlab<span class="hljs-regexp">/config:/</span>etc<span class="hljs-regexp">/gitlab -v /</span>home<span class="hljs-regexp">/gitlab/</span>logs:<span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/gitlab -v /</span>home<span class="hljs-regexp">/gitlab/</span>data:<span class="hljs-regexp">/var/</span>opt<span class="hljs-regexp">/gitlab docker.io/</span>twang2218/gitlab-ce-zh<br></code></pre></td></tr></table></figure><p>把你服务器的端口映射到容器内部的 443 或者 80</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">-v <span class="hljs-regexp">/home/gi</span>tlab<span class="hljs-regexp">/config:/</span>etc/gitlab  <br></code></pre></td></tr></table></figure><p>这里把容器的配置文件夹映射到服务器真实目录 /home/gitlab/config</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">-v <span class="hljs-regexp">/home/gi</span>tlab<span class="hljs-regexp">/logs:/</span>var<span class="hljs-regexp">/log/gi</span>tlab<br></code></pre></td></tr></table></figure><p>这里把容器的日志文件夹映射到服务器真实目录 /home/gitlab/logs</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">-v <span class="hljs-regexp">/home/gi</span>tlab<span class="hljs-regexp">/data:/</span>var<span class="hljs-regexp">/opt/gi</span>tlab<br></code></pre></td></tr></table></figure><p>这里把容器的存储文件夹映射到服务器真实目录 /home/gitlab/data</p><h4 id="进入容器配置gitlab"><a class="markdownIt-Anchor" href="#进入容器配置gitlab">#</a> 进入容器配置 gitlab</h4><ul><li>1. 进入容器</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker exec -it gitlab <span class="hljs-regexp">/bin/</span>bash<br></code></pre></td></tr></table></figure><ul><li>2. 修改配置文件</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vim <span class="hljs-regexp">/etc/gi</span>tlab/gitlab.rb<br></code></pre></td></tr></table></figure><ul><li>3. 配置</li></ul><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-comment">#外部访问地址</span><br> external_url <span class="hljs-string">&#x27;http://124.225.116.118:35236&#x27;</span><br><span class="hljs-comment">#gitlab时区</span><br> gitlab_rails[<span class="hljs-string">&#x27;time_zone&#x27;</span>] = <span class="hljs-string">&#x27;UTC&#x27;</span><br><br><span class="hljs-comment">#gitlab邮件通知</span><br> gitlab_rails[<span class="hljs-string">&#x27;gitlab_email_enabled&#x27;</span>] = <span class="hljs-literal">true</span><br> gitlab_rails[<span class="hljs-string">&#x27;gitlab_email_from&#x27;</span>] = <span class="hljs-string">&#x27;2513178346@qq.com&#x27;</span><br> gitlab_rails[<span class="hljs-string">&#x27;smtp_enable&#x27;</span>] = <span class="hljs-literal">true</span><br> gitlab_rails[<span class="hljs-string">&#x27;smtp_address&#x27;</span>] = <span class="hljs-string">&quot;smtp.qq.com&quot;</span><br> gitlab_rails[<span class="hljs-string">&#x27;smtp_port&#x27;</span>] = <span class="hljs-number">465</span><br> gitlab_rails[<span class="hljs-string">&#x27;smtp_user_name&#x27;</span>] = <span class="hljs-string">&quot;2513178346@qq.com&quot;</span><br> gitlab_rails[<span class="hljs-string">&#x27;smtp_password&#x27;</span>] = <span class="hljs-string">&quot;你的&quot;</span><br> gitlab_rails[<span class="hljs-string">&#x27;smtp_domain&#x27;</span>] = <span class="hljs-string">&quot;qq.com&quot;</span><br> gitlab_rails[<span class="hljs-string">&#x27;smtp_authentication&#x27;</span>] = <span class="hljs-string">&quot;login&quot;</span><br> gitlab_rails[<span class="hljs-string">&#x27;smtp_enable_starttls_auto&#x27;</span>] = <span class="hljs-literal">true</span><br> gitlab_rails[<span class="hljs-string">&#x27;smtp_tls&#x27;</span>] = <span class="hljs-literal">true</span><br> gitlab_rails[<span class="hljs-string">&#x27;smtp_pool&#x27;</span>] = <span class="hljs-literal">true</span><br><span class="hljs-comment">#可选，配置ip限流、白名单</span><br> gitlab_rails[<span class="hljs-string">&#x27;rack_attack_git_basic_auth&#x27;</span>] = &#123;<br>   <span class="hljs-string">&#x27;enabled&#x27;</span> =&gt; <span class="hljs-literal">true</span>,<br>   <span class="hljs-string">&#x27;ip_whitelist&#x27;</span> =&gt; [<span class="hljs-string">&quot;127.0.0.1&quot;</span>],<br>   <span class="hljs-string">&#x27;maxretry&#x27;</span> =&gt; <span class="hljs-number">100</span>,<br>   <span class="hljs-string">&#x27;findtime&#x27;</span> =&gt; <span class="hljs-number">60</span>,<br>   <span class="hljs-string">&#x27;bantime&#x27;</span> =&gt; <span class="hljs-number">3600</span><br> &#125;<br></code></pre></td></tr></table></figure><h4 id="重启服务"><a class="markdownIt-Anchor" href="#重启服务">#</a> 重启服务</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">gitlab-ctl <span class="hljs-literal">stop</span><br>gitlab-ctl reconfigure<br>gitlab-ctl <span class="hljs-literal">start</span><br></code></pre></td></tr></table></figure><h4 id="一些常见问题"><a class="markdownIt-Anchor" href="#一些常见问题">#</a> 一些常见问题</h4><p>1. 同一个 ip 短时间并发可能会触发限流</p><p>解决办法</p><p>方法一、暂时解决，进入容器执行命令删除 IP 黑名单</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">redis-cli -s <span class="hljs-regexp">/var/</span>opt<span class="hljs-regexp">/gitlab/</span>redis/redis.socket<br>keys *attack*<br>del <span class="hljs-string">&quot;上一步查到的键值&quot;</span><br></code></pre></td></tr></table></figure><p>方法二、加 IP 白名单（如果有固定 ip 可以这么做）或增加并发阈值</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-comment">#可选，配置ip限流、白名单</span><br> gitlab_rails[<span class="hljs-string">&#x27;rack_attack_git_basic_auth&#x27;</span>] = &#123;<br>   <span class="hljs-string">&#x27;enabled&#x27;</span> =&gt; <span class="hljs-literal">true</span>,<br>   <span class="hljs-comment">#ip白名单</span><br>   <span class="hljs-string">&#x27;ip_whitelist&#x27;</span> =&gt; [<span class="hljs-string">&quot;127.0.0.1&quot;</span>],<br>   <span class="hljs-comment">#并发阈值</span><br>   <span class="hljs-string">&#x27;maxretry&#x27;</span> =&gt; <span class="hljs-number">100</span>,<br>   <span class="hljs-string">&#x27;findtime&#x27;</span> =&gt; <span class="hljs-number">60</span>,<br>   <span class="hljs-string">&#x27;bantime&#x27;</span> =&gt; <span class="hljs-number">3600</span><br> &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>环境部署</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>gitlab</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nginx搭建文件服务器</title>
    <link href="/2023/04/30/nginx%E6%90%AD%E5%BB%BA%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <url>/2023/04/30/nginx%E6%90%AD%E5%BB%BA%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p>nginx 配置</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>        <span class="hljs-attribute">listen</span> <span class="hljs-number">443</span>;<br>        <span class="hljs-comment"># 对应的域名，多个以空格分开</span><br>        <span class="hljs-attribute">server_name</span>  cdn.xxx.com;<br>        <span class="hljs-attribute">charset</span> utf-<span class="hljs-number">8</span>;<br><br>        <span class="hljs-comment"># 证书文件地址</span><br>        <span class="hljs-comment">#ssl_certificate      /data/ssl/cdn.xxx.com_bundle.crt;</span><br>        <span class="hljs-attribute">ssl_certificate</span>      /data/ssl/cdn.xxx.com.pem;<br>        <span class="hljs-comment"># 证书key</span><br>        <span class="hljs-attribute">ssl_certificate_key</span>   /data/ssl/cdn.xxx.com.key;<br>        <br>        <span class="hljs-comment">#监听/file的路由地址映射到磁盘</span><br>        <span class="hljs-section">location</span> /file &#123;<br>                <span class="hljs-attribute">add_header</span> Access-Control-Allow-Origin *;<br>                <span class="hljs-attribute">add_header</span> Access-Control-Allow-Credentials <span class="hljs-literal">true</span>;<br>                <span class="hljs-attribute">add_header</span> Access-Control-Allow-Methods GET,POST,OPTIONS;<br>                <span class="hljs-attribute">add_header</span> Access-Control-Allow-Headers DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type;<br>                <span class="hljs-attribute">alias</span> /data/file;<br>                &#125;<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git更新.gitignore文件后不生效</title>
    <link href="/2023/02/06/%E5%B7%A5%E5%85%B7/git%E6%9B%B4%E6%96%B0.gitignore%E6%96%87%E4%BB%B6%E5%90%8E%E4%B8%8D%E7%94%9F%E6%95%88/"/>
    <url>/2023/02/06/%E5%B7%A5%E5%85%B7/git%E6%9B%B4%E6%96%B0.gitignore%E6%96%87%E4%BB%B6%E5%90%8E%E4%B8%8D%E7%94%9F%E6%95%88/</url>
    
    <content type="html"><![CDATA[<p>项目更新了.gitignore 文件后直接提交不会生效，解决如下</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">git rm -r --cached . <span class="hljs-regexp">//</span> 删除本地缓存<br>git add . <span class="hljs-regexp">//</span> 添加要提交的文件<br>git commit -m <span class="hljs-string">&#x27;update .gitignore&#x27;</span> <span class="hljs-regexp">//</span> 更新本地的缓存<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MyBatis之TypeHandler用法</title>
    <link href="/2023/01/09/java/MyBatis%E4%B9%8BTypeHandler%E7%94%A8%E6%B3%95/"/>
    <url>/2023/01/09/java/MyBatis%E4%B9%8BTypeHandler%E7%94%A8%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="一-问题点"><a class="markdownIt-Anchor" href="#一-问题点">#</a> 一。问题点</h2><h2 id="在使用postgresql的过程中有用到数组类型与json类型这些类型直接用java的类型去接收是会出现类型转换异常的怎么处理呢这时候就要用到typehandler了"><a class="markdownIt-Anchor" href="#在使用postgresql的过程中有用到数组类型与json类型这些类型直接用java的类型去接收是会出现类型转换异常的怎么处理呢这时候就要用到typehandler了">#</a> 在使用 PostgreSQL 的过程中有用到数组类型与 json 类型，这些类型直接用 java 的类型去接收是会出现类型转换异常的，<br> 怎么处理呢，这时候就要用到 TypeHandler 了</h2><h2 id="二-代码"><a class="markdownIt-Anchor" href="#二-代码">#</a> 二。代码</h2><ul><li>java 数组类型接收 jdbc array</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.china315net.mybatis.handler;<br><br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.apache.ibatis.type.JdbcType;<br><span class="hljs-keyword">import</span> org.apache.ibatis.type.MappedJdbcTypes;<br><span class="hljs-keyword">import</span> org.apache.ibatis.type.MappedTypes;<br><span class="hljs-keyword">import</span> org.apache.ibatis.type.TypeException;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.sql.Array;<br><span class="hljs-keyword">import</span> java.sql.PreparedStatement;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 数组类型处理程序</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@MappedJdbcTypes(&#123;JdbcType.ARRAY&#125;)</span><br><span class="hljs-meta">@MappedTypes(&#123;String[].class, Short[].class, Integer[].class, Long[].class&#125;)</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayTypeHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">org</span>.apache.ibatis.type.ArrayTypeHandler &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNonNullParameter</span><span class="hljs-params">(PreparedStatement ps, <span class="hljs-type">int</span> i, Object parameter, JdbcType jdbcType)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        log.debug(<span class="hljs-string">&quot;jdbcType:&#123;&#125;&quot;</span>, jdbcType);<br>        <span class="hljs-keyword">if</span> (parameter <span class="hljs-keyword">instanceof</span> Array array) &#123;<br>            ps.setArray(i, array);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (!parameter.getClass().isArray()) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeException</span>(<span class="hljs-string">&quot;ArrayType Handler requires SQL array or java array parameter and does not support type &quot;</span> + parameter.getClass());<br>            &#125;<br>            Class&lt;?&gt; componentType = parameter.getClass().getComponentType();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">arrayTypeName</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.resolveTypeName(componentType);<br>            <span class="hljs-type">Array</span> <span class="hljs-variable">array</span> <span class="hljs-operator">=</span> ps.getConnection().createArrayOf(arrayTypeName, (Object[]) parameter);<br>            ps.setArray(i, array);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>java List 类型接收 jdbc array</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.china315net.mybatis.handler;<br><br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.apache.ibatis.type.JdbcType;<br><span class="hljs-keyword">import</span> org.apache.ibatis.type.MappedJdbcTypes;<br><span class="hljs-keyword">import</span> org.apache.ibatis.type.MappedTypes;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.sql.Array;<br><span class="hljs-keyword">import</span> java.sql.CallableStatement;<br><span class="hljs-keyword">import</span> java.sql.PreparedStatement;<br><span class="hljs-keyword">import</span> java.sql.ResultSet;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 数组类型处理程序</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@MappedJdbcTypes(&#123;JdbcType.ARRAY&#125;)</span><br><span class="hljs-meta">@MappedTypes(&#123;List.class&#125;)</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ListToArrayTypeHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">org</span>.apache.ibatis.type.ArrayTypeHandler &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNonNullParameter</span><span class="hljs-params">(PreparedStatement ps, <span class="hljs-type">int</span> i, Object parameter, JdbcType jdbcType)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-keyword">if</span> (parameter <span class="hljs-keyword">instanceof</span> List&lt;?&gt; list) &#123;<br>            <span class="hljs-keyword">if</span> (!list.isEmpty()) &#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">arrayTypeName</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.resolveTypeName(list.get(<span class="hljs-number">0</span>).getClass());<br>                <span class="hljs-type">Array</span> <span class="hljs-variable">array</span> <span class="hljs-operator">=</span> ps.getConnection().createArrayOf(arrayTypeName, list.toArray(Object[]::<span class="hljs-keyword">new</span>));<br>                ps.setArray(i, array);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getNullableResult</span><span class="hljs-params">(ResultSet rs, String columnName)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        log.debug(<span class="hljs-string">&quot;getNullableResult1&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.extractList(rs.getArray(columnName));<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getNullableResult</span><span class="hljs-params">(ResultSet rs, <span class="hljs-type">int</span> columnIndex)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        log.debug(<span class="hljs-string">&quot;getNullableResult2&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.extractList(rs.getArray(columnIndex));<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getNullableResult</span><span class="hljs-params">(CallableStatement cs, <span class="hljs-type">int</span> columnIndex)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        log.debug(<span class="hljs-string">&quot;getNullableResult3&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.extractList(cs.getArray(columnIndex));<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> Object <span class="hljs-title function_">extractList</span><span class="hljs-params">(Array array)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-keyword">return</span> Arrays.stream(((Object[]) extractArray(array))).toList();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>java 使用 FastJson2 的 JSONObject,JSONArray 类型接收 pgsql 的 json 或 jsonb</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.china315net.mybatis.handler;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson2.JSON;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson2.JSONArray;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson2.JSONObject;<br><span class="hljs-keyword">import</span> org.apache.ibatis.type.BaseTypeHandler;<br><span class="hljs-keyword">import</span> org.apache.ibatis.type.JdbcType;<br><span class="hljs-keyword">import</span> org.apache.ibatis.type.MappedTypes;<br><span class="hljs-keyword">import</span> org.postgresql.util.PGobject;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.sql.CallableStatement;<br><span class="hljs-keyword">import</span> java.sql.PreparedStatement;<br><span class="hljs-keyword">import</span> java.sql.ResultSet;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * json类型处理程序</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@MappedTypes(&#123;JSONObject.class, JSONArray.class&#125;)</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JsonbTypeHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseTypeHandler</span>&lt;Object&gt; &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNonNullParameter</span><span class="hljs-params">(PreparedStatement ps, <span class="hljs-type">int</span> i, Object parameter, JdbcType jdbcType)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-type">PGobject</span> <span class="hljs-variable">jsonObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PGobject</span>();<br>        jsonObject.setType(<span class="hljs-string">&quot;json&quot;</span>);<br>        jsonObject.setValue(JSON.toJSONString(parameter));<br>        ps.setObject(i, jsonObject);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getNullableResult</span><span class="hljs-params">(ResultSet rs, String columnName)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-keyword">return</span> JSON.parse(rs.getString(columnName));<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getNullableResult</span><span class="hljs-params">(ResultSet rs, <span class="hljs-type">int</span> columnIndex)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-keyword">return</span> JSON.parse(rs.getString(columnIndex));<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getNullableResult</span><span class="hljs-params">(CallableStatement cs, <span class="hljs-type">int</span> columnIndex)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-keyword">return</span> JSON.parse(cs.getString(columnIndex));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="注意点"><a class="markdownIt-Anchor" href="#注意点">#</a> 注意点:</h2><h3 id="typehandler接口方法说明"><a class="markdownIt-Anchor" href="#typehandler接口方法说明">#</a> TypeHandler 接口方法说明</h3><ul><li>setNonNullParameter 方法在写入的数据库操作时会调用</li><li>getNullableResult 方法在查询的数据库操作时会调用</li></ul><hr><h3 id="类型处理器支持的java与jdbc类型"><a class="markdownIt-Anchor" href="#类型处理器支持的java与jdbc类型">#</a> 类型处理器支持的 Java 与 jdbc 类型</h3><ul><li><h4 id="如果要决定一个类型处理器支持哪些java类型有如下途径优先级从上到下依次增加"><a class="markdownIt-Anchor" href="#如果要决定一个类型处理器支持哪些java类型有如下途径优先级从上到下依次增加">#</a> 如果要决定一个类型处理器支持哪些<strong> Java</strong> 类型，有如下途径 (优先级从上到下依次增加)。</h4><ul><li><ol><li>类型处理器的泛型可以决定类型处理器支持的<strong> JavaType</strong>；</li></ol></li><li><ol start="2"><li>在类型处理器上使用注解 @<strong>MappedTypes</strong> 来指定，例如 @<strong>MappedTypes({List.class})</strong>；</li></ol></li><li><ol start="3"><li>在配置文件中注册类型处理器时，通过 &lt;<strong>typeHandler</strong> &gt; 标签的<strong> javaType</strong> 属性来指定，例如 <code>&lt;typeHandler handler=&quot;com.lee.learn.mybatis.typehandler.ListStringTypeHandler&quot; javaType=&quot;List&quot;/&gt;</code> 。</li></ol></li></ul></li><li><h4 id="如果要决定一个类型处理器支持哪些jdbc类型有如下途径优先级从上到下依次增加"><a class="markdownIt-Anchor" href="#如果要决定一个类型处理器支持哪些jdbc类型有如下途径优先级从上到下依次增加">#</a> 如果要决定一个类型处理器支持哪些<strong> Jdbc</strong> 类型，有如下途径 (优先级从上到下依次增加)。</h4><ul><li><ol><li>在类型处理器上使用注解 @<strong>MappedJdbcTypes</strong> 来指定，例如 @<strong>MappedJdbcTypes({JdbcType.VARCHAR, JdbcType.CHAR})</strong>；</li></ol></li><li><ol start="2"><li>在配置文件中注册类型处理器时，通过 &lt;<strong>typeHandler</strong> &gt; 标签的<strong> jdbcType</strong> 属性来指定（注意：同时也需要设置了<strong> javaType</strong><br> 属性，否则<strong> jdbcType</strong> 属性不生效）， 例如 &lt;<strong>typeHandler handler=&quot;<br>com.lee.learn.mybatis.typehandler.ListStringTypeHandler&quot; javaType=“List” jdbcType=“VARCHAR”/</strong>&gt;。</li></ol></li></ul></li></ul><hr><h3 id="typehandler如何生效"><a class="markdownIt-Anchor" href="#typehandler如何生效">#</a> TypeHandler 如何生效</h3><p>通常，<strong>TypeHandler</strong> 的使用场景有两个。</p><ol><li>在设置预处理语句（<strong>PreparedStatement</strong>）中的参数时，完成<strong> Java</strong> 类型到<strong> Jdbc</strong> 类型的转换，通常就是<strong> INSERT</strong> 和<strong> UPDATE</strong><br> 的场景；</li><li>在将查询到的结果记录映射到<strong> Java</strong> 实体对象时，完成<strong> Jdbc</strong> 类型到<strong> Java</strong> 类型的转换，通常就是会使用到 &lt;<strong>resultMap</strong><br> &gt; 的场景。</li></ol><p>在使用场景下，如何让我们自定义的<strong> TypeHandler</strong> 生效，如下直接给出结论，再做验证。</p><ol><li><strong>显式使用</strong>。示例中就是显示使用，即在 &lt;<strong>result</strong> &gt; 标签中和 <code>#&#123;&#125;</code>  占位符中使用<strong> typeHandler</strong><br> 属性来指定使用的类型处理器，这种方式是最简单粗暴的，就算不在配置文件中注册类型处理器，就算没有为类型处理器配置任何支持的<br><strong> Jdbc</strong> 类型，只要在 &lt;<strong>result</strong> &gt; 标签中和 <code>#&#123;&#125;</code>  占位符中使用了<strong> typeHandler</strong> 属性来指定要使用的类型处理器，那么 **MyBatis<br>** 就会使用这个类型处理器；</li><li><strong>隐式使用</strong>。通常，我们是不会关注到<strong> TypeHandler</strong> 的，然而大部分时候<strong> Java</strong> 类型到<strong> Jdbc</strong> 类型的相互转换都能成功完成，是因为<br><strong> MyBatis</strong> 会隐式使用其内置的<strong> TypeHandler</strong>，而隐式使用哪个内置<strong> TypeHandler</strong>，是通过 &lt;<strong>result</strong> &gt; 标签和 <code>#&#123;&#125;</code>  占位符的<br><strong> JavaType</strong> 和<strong> JdbcType</strong> 进行推断的。</li></ol><p><strong>显式使用</strong>没什么好说的，最为简单明了。下面重点说一下<strong>隐式使用</strong>。</p><p>首先能够被隐式使用的<strong> TypeHandler</strong>，都需要完成注册，自定义的<strong> TypeHandler</strong> 可以在配置文件中通过 &lt;<strong>typeHandler</strong><br> &gt; 标签注册，而内置的<strong> TypeHandler</strong> 是在<strong> TypeHandlerRegistry#TypeHandlerRegistry</strong> 方法完成的注册，这个方法有点长，这里不再展示。</p><p>然后每一个<strong> TypeHandler</strong> 都有其支持的<strong> Java</strong> 类型，以及可能支持的<strong> Jdbc</strong> 类型（也可能没有），<strong>TypeHandler</strong> 注册到 **MyBatis<br>** 中后，是按照如下形式存储的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Map&lt;JavaType, Map&lt;JdbcType, TypeHandler&gt;&gt;<span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map&lt;Type, Map&lt;JdbcType, TypeHandler&lt;?&gt;&gt;&gt;typeHandlerMap=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;&gt;();<br></code></pre></td></tr></table></figure><p>对隐式使用<strong> TypeHandler</strong> 做一个小结。</p><ol><li>每一个<strong> TypeHandler</strong> 都有其支持的<strong> Java</strong> 类型，以及可能支持的<strong> Jdbc</strong> 类型（也可能没有），并且在<strong> MyBatis</strong> 中以 *<br><em>Map&lt;JavaType, Map&lt;JdbcType, TypeHandler&gt;&gt;</em>* 的形式存放；</li><li>如果有多个<strong> TypeHandler</strong> 的支持的<strong> Java</strong> 类型和<strong> Jdbc</strong> 类型都一样，则后注册的<strong> TypeHandler</strong> 会覆盖先注册的 *<br><em>TypeHandler</em>*；</li><li>如果在<strong> MyBatis</strong> 的参数占位符 <code>#&#123;&#125;</code>  或者结果映射标签 &lt;<strong>result</strong> &gt; 中通过<strong> javaType</strong> 属性指定了<strong> JavaType</strong>，则<strong> MyBatis</strong><br> 在推断使用哪种<strong> TypeHandler</strong> 时依据的<strong> JavaType</strong> 会使用<strong> javaType</strong> 属性的值，否则，如果是 &lt;<strong>result</strong> &gt; 的话则<strong> MyBatis</strong><br> 能根据映射对象推断出<strong> JavaType</strong>，如果是 <code>#&#123;&#125;</code>  的话则<strong> JavaType</strong> 为<strong> Object</strong>；</li><li>如果在<strong> MyBatis</strong> 的参数占位符 <code>#&#123;&#125;</code>  或者结果映射标签 &lt;<strong>result</strong> &gt; 中通过<strong> jdbcType</strong> 属性指定了<strong> JdbcType</strong>，则<strong> MyBatis</strong><br> 在推断使用哪种<strong> TypeHandler</strong> 时依据的<strong> JdbcType</strong> 会使用<strong> jdbcType</strong> 属性的值，否则依据的<strong> JdbcType</strong> 会为<strong> null</strong>；</li><li><strong>MyBatis</strong> 在推断使用哪个<strong> TypeHandler</strong> 时，会先使用<strong> JavaType</strong> 拿到<strong> JavaType</strong> 对应的<strong> Map&lt;JdbcType,<br>TypeHandler&gt;</strong>，然后使用<strong> JdbcType</strong> 去匹配<strong> TypeHandler</strong>，匹配不到则再使用<strong> JdbcType=null</strong> 去匹配<strong> TypeHandler</strong><br>，如果还匹配不到，则判断<strong> JavaType</strong> 对应的<strong> TypeHandler</strong> 是否有多个，如果是多个则返回<strong> null</strong> 表示匹配失败，如果只有一个则使用这个<br><strong> TypeHandler</strong>。</li><li>spring 框架可以把 TypeHandler 实例注册到 IOC 容器，在使用时会根据类型去推断出要用哪个类型处理器</li></ol><h2 id="最后建议自定义的typehandler都要为其指定支持的javatype和jdbctype以及必要时在result标签和占位符中都把javatype和jdbctype属性配置上这样mybatis能够快速无误的帮我们推断出应该使用哪个类型处理器"><a class="markdownIt-Anchor" href="#最后建议自定义的typehandler都要为其指定支持的javatype和jdbctype以及必要时在result标签和占位符中都把javatype和jdbctype属性配置上这样mybatis能够快速无误的帮我们推断出应该使用哪个类型处理器">#</a> 最后建议自定义的<strong> TypeHandler</strong> 都要为其指定支持的<strong> JavaType</strong> 和<strong> JdbcType</strong>，以及必要时在 &lt;<strong>result</strong> &gt; 标签和 <code>#&#123;&#125;</code>  占位符中都把<br><strong> javaType</strong> 和<strong> jdbcType</strong> 属性配置上，这样<strong> MyBatis</strong> 能够快速无误的帮我们推断出应该使用哪个类型处理器。</h2><h3 id="小补充"><a class="markdownIt-Anchor" href="#小补充">#</a> 小补充</h3><p>这里再对为参数占位符 <code>#&#123;&#125;</code>  推断类型处理器时的一些逻辑进行补充说明，不看也不影响对本篇文章的理解。</p><p>为参数占位符 <code>#&#123;&#125;</code>  推断类型处理器时，如果没有通过<strong> javaType</strong> 来指定<strong> Java</strong> 类型，那么<strong> MyBatis</strong> 是无法知道<strong> Java</strong><br> 类型是什么的（而 &lt;<strong>result</strong> &gt; 标签是可以的，这是不同点），此时<strong> MyBatis</strong> 会默认<strong> Java</strong> 类型是<strong> Object</strong>，然后通过<strong> Object</strong> 这个<br><strong> JavaType</strong> 拿到一个<strong> UnknownTypeHandler</strong> 内置类型处理器，下面看一下<strong> UnknownTypeHandler</strong> 的<strong> setNonNullParameter ()</strong> 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNonNullParameter</span><span class="hljs-params">(PreparedStatement ps, <span class="hljs-type">int</span> i, Object parameter, JdbcType jdbcType)</span>         <span class="hljs-keyword">throws</span> SQLException &#123;     <span class="hljs-type">TypeHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> resolveTypeHandler(parameter, jdbcType);     handler.setParameter(ps, i, parameter, jdbcType); &#125;  <span class="hljs-keyword">private</span> TypeHandler&lt;?&gt; resolveTypeHandler(Object parameter, JdbcType jdbcType) &#123;     TypeHandler&lt;?&gt; handler;     <span class="hljs-keyword">if</span> (parameter == <span class="hljs-literal">null</span>) &#123;         handler = OBJECT_TYPE_HANDLER;     &#125; <span class="hljs-keyword">else</span> &#123;         <span class="hljs-comment">// 根据需要设置到PreparedStatement中的参数判断出Java类型         // 然后再调用到TypeHandlerRegistry#getTypeHandler拿TypeHandler         handler = typeHandlerRegistrySupplier.get().getTypeHandler(parameter.getClass(), jdbcType);         if (handler == null || handler instanceof UnknownTypeHandler) &#123;             handler = OBJECT_TYPE_HANDLER;         &#125;     &#125;     return handler; &#125;</span><br></code></pre></td></tr></table></figure><p>已知<strong> setNonNullParameter ()</strong> 方法是会在实际执行<strong> SQL</strong> 语句前被调用到，此时会完成<strong> PreparedStatement</strong> 的参数设置，因此这时能够拿到实际设置到<br><strong> PreparedStatement</strong> 中的参数值从而得到参数的<strong> JavaType</strong>，所以这时会再尝试基于<strong> JavaType</strong> 和<strong> JdbcType</strong> 去匹配 *<br><em>TypeHandler</em>*。</p><p>所以本质上就算没有通过<strong> javaType</strong> 指定<strong> JavaType</strong>，&lt;<strong>result</strong> &gt; 标签和 <code>#&#123;&#125;</code>  参数占位符都是能够拿到<strong> JavaType</strong>，只不过 &lt;*<br><em>result</em>*&gt; 标签在构建<strong> ResultMapping</strong> 时就能够拿到<strong> JavaType</strong>，而 <code>#&#123;&#125;</code>  参数占位符需要在<strong> SQL</strong> 语句实际执行前为 *<br><em>PreparedStatement<strong> 设置参数时才能够拿到</strong> JavaType</em>*。</p><p>那么按照本节的结论，为什么第四节最后的<strong>例子 1</strong> 中的 <code>#&#123;&#125;</code>  使用不到<strong> ListStringTypeHandler</strong> 呢，这是因为在为 *<br><em>PreparedStatement<strong> 设置参数时，<strong>studentIntention</strong> 这个参数的实际类型是</strong> ArrayList</em>*，而不是<strong> List</strong>，但在<strong> MyBatis</strong> 中，认为<br><strong> ListStringTypeHandler</strong> 是支持<strong> List</strong> 而不是<strong> ArrayList</strong> 的。</p><h2 id="总结"><a class="markdownIt-Anchor" href="#总结">#</a> 总结</h2><p><strong>TypeHandler</strong> 能够帮助完成<strong> Java</strong> 类型到<strong> Jdbc</strong> 类型的相互转换，对于常规的转换，<strong>MyBatis</strong> 提供了内置的<strong> TypeHandler</strong><br>，而对于非常规的转换，需要自定义<strong> TypeHandler</strong>。自定义方式有两种，如下所示。</p><ol><li>实现<strong> TypeHandler</strong> 接口；</li><li>继承<strong> BaseTypeHandler</strong> 抽象类。</li></ol><p>更推荐使用继承<strong> BaseTypeHandler</strong> 抽象类的方式来自定义<strong> TypeHandler</strong>。</p><p>自定义的<strong> TypeHandler</strong> 有如下两种方式被使用。</p><ol><li>显示使用。在 &lt;<strong>result</strong> &gt; 标签或者 <code>#&#123;&#125;</code>  中通过<strong> typeHandler</strong> 属性指定要使用的<strong> TypeHandler</strong>；</li><li>隐式使用。通过 &lt;<strong>result</strong> &gt; 标签或者 <code>#&#123;&#125;</code>  的<strong> JavaType</strong> 和<strong> JdbcType</strong>，由<strong> MyBatis</strong> 推断出需要使用的<strong> TypeHandler</strong>。</li></ol>]]></content>
    
    
    <categories>
      
      <category>环境部署</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>mybatis</tag>
      
      <tag>TypeHandler</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
